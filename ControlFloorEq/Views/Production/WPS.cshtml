@model dynamic
@{
    int index = 0;
    var docEntry = Model.DocEntry;
}
<style>
    /* Clase para marcar los campos requeridos en rojo */
    .input-error {
        border: 2px solid red;
    }

    .table-container {
        width: 100%;
        position: relative; /* Asegura que el scroll esté en el contenedor */
    }

    .table-responsive {
        max-height: 400px; /* Limitar la altura de la tabla para que el scroll vertical aparezca */
        overflow-y: auto; /* Solo el scroll vertical */
        display: block; /* Para permitir el scroll dentro de la tabla */
    }

    .ordenes-wps-table {
        width: 100%;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        table-layout: fixed; /* Evita que las columnas se ajusten al contenido */
    }

        .ordenes-wps-table th,
        .ordenes-wps-table td {
            padding: 4px;
            vertical-align: middle;
            text-align: center;
        }

        .ordenes-wps-table thead {
            background-color: #343a40;
            color: white;
        }

        .ordenes-wps-table tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }

        /* Fijar el tamaño de la primera columna */
        .ordenes-wps-table th:nth-child(1),
        .ordenes-wps-table td:nth-child(1) {
            width: 30px; /* Fijamos el ancho de la primera columna */
            height: 30px; /* Altura fija */
            line-height: 30px; /* Centrado vertical */
        }

    .totales-container {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 1px;
        display: flex;
        justify-content: space-between;
    }

        .totales-container .total-label {
            font-weight: bold;
            text-align: right;
        }

        .totales-container .total-value {
            font-weight: bold;
            color: #007bff;
        }
    /* Borde rojo para los campos inválidos */
    .border-danger {
        border-color: #dc3545 !important;
    }

</style>

<style>
    .nav-tabs .nav-link {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
        font-size: 14px;
        width: auto;
        background-color: white; /* Fondo blanco */
        border: 1px solid #dee2e6; /* Borde para resaltar */
        border-radius: 5px; /* Bordes redondeados */
    }

        .nav-tabs .nav-link.active {
            background-color: #f8f9fa; /* Color diferente para la pestaña activa */
            border-bottom-color: transparent; /* Para que no se superponga con el contenido */
        }

        .nav-tabs .nav-link i {
            font-size: 30px;
        }

    .tab-content {
        background: white; /* Fondo blanco para el contenido */
        padding: 20px;
        border: 1px solid #dee2e6;
        border-top: none;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<link href="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
<div class="container-fluid p-0">

    @if (Model != null)
    {
        <div class="mb-3">
            <a href="javascript:window.history.back();">
                ⬅ Regresar
            </a>
            <h1 class="h3 d-inline align-middle">  Orden de Producción <strong># @Model.DocNum</strong></h1>

            <input type="text" id="DocEntry" value="@Model.DocEntry" hidden="hidden">
        </div>

        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <p><strong>Fecha de Orden:</strong> @Model.Fecha_Fabricacion.ToString("dd-MM-yyyy")</p>
                        </div>

                        <div class="col-md-3">
                            <p><strong>Cliente:</strong> @Model.CardName (@Model.CardCode)</p>
                        </div>
                        <div class="col-md-3">
                            <p><strong>Artíulo:</strong> @Model.ItemCode - @Model.ProdName</p>
                            <input type="hidden" id="ItemCode" value="@Model.ItemCode" />
                        </div>
                        <div class="col-md-3">
                            <p><strong>Almacén:</strong> @Model.WhsName (@Model.Warehouse)</p>
                        </div>

                        @*  <div class="col-md-3">
                            <p><strong>Serie:</strong> @Model.SeriesTxt</p>
                        </div> *@
                        <div class="col-md-3">
                            <p><strong>Estado:</strong> @Model.StatusTexto</p>
                        </div>


                        <div class="col-md-3">
                            <p><strong>Cantidad Planeada:</strong> @Model.PlannedQty.ToString("F2")</p>
                        </div>

                        <div class="col-md-3">
                            <p><strong>Peso Neto:</strong> @Model.WeightN.ToString("F2")</p>
                        </div>

                        <div class="col-md-3">
                            <p><strong>Tipo de Peso:</strong> @Model.TipoPeso</p>
                        </div>

                        <div class="col-md-3">
                            <p><strong>Método de Impresión:</strong> @Model.MethodPrint</p>
                        </div>
                        @*   <div class="col-md-4">
                            <p><strong>Acción Máquina:</strong> @Model.ActionMachine</p>
                        </div> *@
                        @*   <input type="text" id="Quantity" value="@Model.Quantity" hidden="hidden"> *@
                    </div>

                    <!-- Botón para expandir/contraer -->
                    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                        <i class="fas fa-chevron-down"></i> Detalle de Producto
                    </button>

                    <!-- Contenido que se expande/contrae -->
                    <div class="collapse mt-3" id="collapseExample">
                        <div class="card card-body">
                            <div class="row">

                                <div class="col-md-3">
                                    <p><strong>Maquina:</strong> @Model.IdMachine - @Model.NameMachine </p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Formula:</strong> @Model.Campo_1</p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Core:</strong> @Model.Campo_2</p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Longitud:</strong> @Model.Campo_3.ToString("F2")</p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Calibre:</strong> @Model.Campo_4</p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Ancho:</strong> @Model.Campo_5.ToString("F2")</p>
                                </div>

                                <div class="col-md-3">
                                    <p><strong>Color:</strong> @Model.Campo_6</p>
                                </div>
                                <div class="col-md-3">
                                    <p><strong>Peso Bruto:</strong> @Model.Campo_7.ToString("F2")</p>
                                </div>
                               @*  <div class="col-md-3">
                                    <p><strong>Peso Neto:</strong> @Model.Campo_8</p>
                                </div> *@

                                <div class="col-md-3">
                                    <p><strong>Impresora Etiqueta por Paquete:</strong> @Model.Campo_9</p>
                                </div>
                               
                                <div class="col-md-3">
                                    <p><strong>Tarimas a Producir:</strong> @Model.Campo_11.ToString("F2")</p>
                                </div>

                                <div class="col-md-3">
                                    <p><strong>Rollos por Tarima:</strong> @Model.Campo_12.ToString("F2")</p>
                                </div>
                               @*  <div class="col-md-3">
                                    <p><strong>Campo 13:</strong> @Model.Campo_13</p>
                                </div> *@
                               @*  <div class="col-md-3">
                                    <p><strong>Campo 14:</strong> @Model.Campo_14</p>
                                </div> *@

                                <div class="col-md-3">
                                    <p><strong>Impresora Etiqueta por Pallet:</strong> @Model.Campo_15</p>
                                </div>


                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="col-md-12">

            <div class="row">
                <div class="container mt-4">
                    <ul class="nav nav-tabs" id="botonesTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="iniciar-tab" data-bs-toggle="tab" data-bs-target="#content-iniciar" type="button" role="tab"
                                 >
                                <i class="fas fa-check-circle tab-icon text-success"></i>
                                Iniciar
                            </button>
                        </li>
                       @*  <li class="nav-item" role="presentation">
                            <button class="nav-link" id="turno-tab" data-bs-toggle="tab" data-bs-target="#content-turno" type="button" role="tab">
                                <i class="fas fa-stopwatch tab-icon text-warning"></i>
                                Cambio De Turno
                            </button>
                        </li> *@
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="paro-tab" data-bs-toggle="tab" data-bs-target="#content-paro" type="button" role="tab">
                                <i class="fas fa-hand-paper tab-icon text-danger"></i>
                                Paro De Maquina
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="merma-tab" data-bs-toggle="tab" data-bs-target="#content-merma" type="button" role="tab">
                                <i class="fas fa-trash-restore tab-icon text-secondary"></i>
                                Merma
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="btnFinalizar" data-bs-toggle="tab" data-bs-target="#content-finalizar" type="button" role="tab">
                                <i class="fas fa-power-off tab-icon text-dark"></i>
                                Finalizar
                            </button>
                        </li>
                    </ul>

                    <div class="tab-content" id="botonesTabsContent">
                       
                        <input type="hidden" id="IdPallet" value="" />
                      
                        <div class="tab-pane fade" id="content-iniciar" role="tabpanel">
                            <!-- Formulario Inicial -->
                            <div class="col-md-12">

                                <div class="row align-items-center">
                                    <!-- Botón para abrir pallet -->
                                    <div class="col d-flex justify-content-center">
                                        <button id="btnAbrirPallet" class="btn btn-primary btn-lg">Abrir Pallet</button>
                                    </div>

                                    <!-- Botón para generar reporte -->
                                    <div class="col d-flex justify-content-center">
                                        <button id="btnGenerarReporte" type="button" class="btn btn-success btn-lg d-flex align-items-center gap-2" onclick="cargarReportePallet('@Model.DocEntry')">
                                            <i class="bi bi-printer"></i> Ver Reporte 
                                        </button>
                                    </div>


                                    <div class="col text-end">
                                        <label id="labelPallet" class="text-dark fw-bold" for="StringPallet">Sin Pallet Asignado</label>
                                    </div>
                                </div>

                                <div class="row">

                                    <!-- Primera columna: Formularios -->
                                    <div class="col-md-4">
                                        <div class="container">
                                            <div class="row row-cols-2 row-gap-md-4">
                                                <div class="col-md-12">
                                                    <div class="row">
                                                        <!-- Icono y método de impresión -->
                                                        <div class="col-md-7 d-flex align-items-center">
                                                            <i class="fa fa-print" style="font-size: 30px;"></i>
                                                            <label style="color: #000; margin-left: 10px;" for="floatingInput">Método Impresión De Etiqueta</label>
                                                        </div>
                                                    </div>

                                                </div>
                                                <!-- Selector de Supervisor -->
                                                <div class="col-md-12">
                                                    <div class="form-floating">
                                                        <div style="width: 100%; position: relative; z-index: 10">
                                                            <label for="dropdown-supervisores" style="margin-bottom: 8px; display: block;">
                                                                Selecciona un Supervisor:
                                                            </label>
                                                            <input list="supervisor" id="supervisorInput" class="form-control" placeholder="Selecciona o escribe un Supervisor">
                                                            <datalist id="supervisor"></datalist>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Campo de Piezas -->
                                                <div class="col">
                                                    <div class="form-floating">
                                                        <input type="number"
                                                               class="form-control"
                                                               id="piezas"
                                                               placeholder="Bascula"
                                                               style="color: #000; height: 120px; font-size: 4rem; text-align: center;"
                                                               value="0"
                                                               onchange="this.form.submit()" />
                                                        <label style="color: #000" for="piezas">Piezas</label>
                                                    </div>
                                                </div>

                                                <!-- Campo de Lectura de Báscula -->
                                                <div class="col">
                                                    <div class="form-floating">
                                                        <input type="number"
                                                               class="form-control"
                                                               id="lecturaBascula"
                                                               placeholder="Bascula"
                                                               style="color: #000; height: 120px; font-size: 4rem; text-align: center;"
                                                               value="0"
                                                               onchange="this.form.submit()" />
                                                        <label style="color: #000" for="lecturaBascula">Lectura De Bascula (KG.)</label>
                                                    </div>
                                                </div>

                                                <!-- Selector de Báscula -->
                                                <div class="col-md-12">
                                                    <div style="position: relative; z-index: 9">
                                                        <label for="dropdown-basculas" style="margin-bottom: 8px; display: block;">
                                                            Bascula Habilitada:
                                                        </label>
                                                        <select class="form-control" id="dropdown-basculas" style="width: 100%;">
                                                            <option value="" disabled selected>Buscar o seleccionar...</option>
                                                        </select>
                                                    </div>
                                                </div>

                                                <!-- Selector de Impresora -->
                                                <div class="col-md-12">
                                                    <div style="position: relative; z-index: 9">
                                                        <label for="dropdown-impresoras" style="margin-bottom: 8px; display: block;">
                                                            Impresion De Etiqueta:
                                                        </label>
                                                        <select class="form-control" id="dropdown-impresoras" style="width: 100%;">
                                                            <option value="" disabled selected>Buscar o seleccionar...</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-md-12">

                                                    <div class="row">
                                                        <!-- Contenedor flexible para los botones -->
                                                        <div class="d-flex justify-content-center gap-3 flex-wrap">
                                                            <button type="button" class="btn btn-warning px-4 py-2 flex-fill" onclick="cerrarPallet()">
                                                                Cerrar Pallet
                                                            </button>
                                                            <button type="button" id="guardarBtn" class="btn btn-primary px-4 py-2 flex-fill">
                                                                Guardar
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Segunda columna: Tabla -->
                                    <div class="col-md-8">
                                        <div class="totales-container">

                                            <span class="total-label">Total Peso Neto:</span>
                                            <span class="total-value" id="totalPesoNeto">0.00</span>
                                            <span class="total-label">Total Peso Bruto:</span>
                                            <span class="total-value" id="totalPesoBruto">0.00</span>
                                        </div>

                                        <div class="table-container">
                                            <div class="table-responsive">
                                                <table class="ordenes-wps-table table table-striped table-bordered table-hover text-center mt-3">
                                                    <thead class="table-dark">
                                                        <tr>
                                                            <th>#</th>
                                                            <th># De Pallet</th>
                                                            <th># De Paquete</th>
                                                            <th>Fecha y Hora de Ingreso</th>

                                                            <th>Lote</th>
                                                            <th>Peso Neto</th>
                                                            <th>Peso Bruto</th>
                                                            <th></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>
                        @* <div class="tab-pane fade" id="content-turno" role="tabpanel">
                            <h3>Cambio De Turno</h3>
                            <p>Contenido para cambio de turno...</p>
                        </div> *@
                        <div class="tab-pane fade" id="content-paro" role="tabpanel">
                            <!-- Botón Nuevo -->
                            <div class="row mb-3">
                                <div class="col">
                                    <button type="button" class="btn btn-primary" onclick="cargarFormParo('@Model.DocEntry', '@Model.IdMachine')">
                                        Nuevo
                                    </button>

                                </div>
                            </div>

                            <!-- Tabla de incidencias -->
                            <div class="row">
                                <div class="col">
                                    <div style="max-height: 350px; overflow-y: auto;">
                                        <table id="timeStopTable" class="table table-striped table-bordered table-hover">
                                            <thead class="table-dark">
                                                <tr>
                                                    <th>FOLIO</th>
                                                    <th>ELABORADA</th>
                                                    <th>PROCESO</th>
                                                    <th>MAQUINA</th>
                                                    <th>INICIO</th>
                                                    <th>FINAL</th>
                                                    <th>MOTIVO</th>
                                                    <th>ESTATUS</th>
                                                    <th>ACCIONES</th>
                                                </tr>
                                            </thead>
                                            <tbody>    </tbody>
                                        </table>

                                    </div>
                                </div>
                            </div>

                            <!-- Modal Principal -->
                            <div class="modal fade" id="modalPrincipal" tabindex="-1" aria-labelledby="modalPrincipalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="modalPrincipalLabel">Información Tiempo Muerto</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <!-- Aquí cargamos la vista parcial -->
                                        <div class="modal-body">
                                            <div class="d-flex">
                                                <strong class="fw-bold me-3">Proceso:</strong>
                                                <div class="d-flex gap-4">
                                                    <!-- Radio 01: Extrusión -->
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="process" id="01" value="01" />
                                                        <label class="form-check-label" for="01">Extrusión</label>
                                                    </div>
                                                    <!-- Radio 02: Co-Extrusión -->
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="process" id="02" value="02" />
                                                        <label class="form-check-label" for="02">Co-Extrusión</label>
                                                    </div>
                                                    <!-- Radio 03: Embobinado -->
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="process" id="03" value="03" />
                                                        <label class="form-check-label" for="03">Embobinado</label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mt-3">

                                                <div class="col-md-4">
                                                    <label for="kgHr" class="form-label">KG x HR:</label>
                                                    <input type="number" class="form-control" id="kgHr" placeholder="Tarimas a producir" />
                                                </div>
                                                <div class="col-md-8">
                                                    <label for="dropdown-motivo" style=" margin-bottom: 8px; display: block;">Motivo:</label>
                                                    <select class="form-control" id="dropdown-motivo" style="width: 100%;">
                                                        <option value="" disabled selected>Buscar o seleccionar...</option>
                                                    </select>

                                                </div>
                                            </div>
                                            <div class="row mt-3 p-3">
                                                <div class="col-md-6 border p-3">
                                                    <h5 class="text-center bg-primary text-white p-2">Fecha y hora de inicio de paro</h5>
                                                    <div class="mb-3">
                                                        <label for="fechaInicio" class="form-label">Fecha</label>
                                                        <input type="date" class="form-control" id="fechaInicio" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label for="horaInicio" class="form-label">Hora</label>
                                                        <input type="time" class="form-control" id="horaInicio" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label for="observacionesInicio" class="form-label">Observaciones:</label>
                                                        <textarea class="form-control" id="observacionesInicio" rows="2"></textarea>
                                                    </div>
                                                </div>

                                                <div class="col-md-6 border p-3">
                                                    <h5 class="text-center bg-primary text-white p-2">Fecha y hora de fin de paro</h5>
                                                    <div class="mb-3">
                                                        <label for="fechaFin" class="form-label">Fecha</label>
                                                        <input type="date" class="form-control" id="fechaFin" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label for="horaFin" class="form-label">Hora</label>
                                                        <input type="time" class="form-control" id="horaFin" />
                                                    </div>
                                                    <div class="mb-3">
                                                        <label for="observacionesFin" class="form-label">Observaciones:</label>
                                                        <textarea class="form-control" id="observacionesFin" rows="2"></textarea>
                                                    </div>

                                                    <div class="d-flex gap-3">
                                                        <div class="form-floating">
                                                            <input type="text" class="form-control" id="tiempoHrs" placeholder="Tiempo (Hrs.)" disabled />
                                                            <label for="tiempoHrs">Tiempo (Hrs.)</label>
                                                        </div>
                                                        <div class="form-floating">
                                                            <input type="text" class="form-control" id="kgsParo" placeholder="Kgs. Paro" />
                                                            <label for="kgsParo">Kgs. Paro</label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                            <!-- Botón Guardar -->
                                            <button type="button" class="btn btn-success" id="guardarParoBtn">Guardar</button>
                                            <button type="button" class="btn btn-success" id="UpdateParoBtn">Actualizar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                        <div class="tab-pane fade" id="content-merma" role="tabpanel">
                            <div class="container">
                                <div class="row mb-3">
                                    <h3 class="text-center fw-bold">📊 Acumulado De Merma</h3>
                                </div>

                                <div class="row g-3 align-items-end">
                                    <div class="col-md-3">
                                        <label for="supervisoresMermaInput" class="form-label">👨‍💼 Supervisor:</label>
                                        <input list="supervisoresMerma" id="supervisoresMermaInput" class="form-control" placeholder="Selecciona o escribe un Supervisor">
                                        <datalist id="supervisoresMerma"></datalist>
                                    </div>

                                    <div class="col-md-3">
                                        <label for="dropdown-TypMerma" class="form-label">🗑️ Tipo de Merma:</label>
                                        <select class="form-control" id="dropdown-TypMerma">
                                            <option value="" disabled selected>Seleccionar...</option>
                                        </select>
                                    </div>

                                    <div class="col-md-3">
                                        <label for="pesoMerma" class="form-label">⚖️ Peso Merma (kg):</label>
                                        <input type="number" class="form-control" id="pesoMerma" placeholder="Ingrese peso">
                                    </div>

                                    <div class="col-md-3 d-grid">
                                        <button class="btn btn-primary fw-bold" onclick="sendMermaData(@docEntry)">
                                            💾 Guardar Merma
                                        </button>
                                    </div>
                                </div>

                                <div class="mt-4 p-3 bg-light rounded shadow-sm">
                                    <div class="table-responsive" style="max-height: 350px; overflow-y: auto;">
                                        <table class="table table-striped table-hover text-center align-middle">
                                            <thead class="table-dark">
                                                <tr>
                                                    <th>Id</th>
                                                    <th>📌 Tipo De Merma</th>
                                                    <th>📊 Acumulado</th>
                                                    <th>🗑️ Acción</th>
                                                </tr>
                                            </thead>
                                            <tbody id="mermasTableBody">
                                                <!-- Se llenará con JS -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col-md-6 text-end fw-bold">♻️ Acumulado De Desperdicio:</div>
                                    <div class="col-md-6 text-start">
                                        <p class="p-2 rounded text-white fw-bold text-center" style="background-color: #4CAF50;">
                                            <!-- Aquí se llenará el acumulado dinámicamente -->
                                        </p>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div class="tab-pane fade show active" id="content-finalizar" role="tabpanel">
                         
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para mostrar el reporte -->
        <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reportModalLabel">Reporte</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Aquí se mostrará el PDF -->
                        <iframe id="pdfIframe" style="width: 100%; height: 500px;" frameborder="0"></iframe>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        <button type="button" class="btn btn-primary" id="btnImprimir">Imprimir</button>
                    </div>
                </div>
            </div>
        </div>

    }
    else
    {
        <p>No hay datos disponibles.</p>
    }

</div>

<!-- Iniciar o agrega Pallet  -->
<script>

    async function fetchIdPallet() {
        try {
              let docEntry = document.getElementById("DocEntry").value;
            const response = await fetch(`/Pallets/IdPallet`);
            const data = await response.json();

            Swal.fire({
                title: "Pallet asignado",
                text: `Pallet: ${data.entryObject}`,
                icon: "success"
            });

            console.log("Pallet asignado:", data.entryObject);
            document.getElementById("IdPallet").value = data.entryObject;
            localStorage.setItem('IdPallet', data.entryObject);
            document.getElementById("labelPallet").innerText = "Pallet Asignado: " + data.entryObject;

        } catch (error) {
            Swal.fire({
                title: "Error",
                text: "No se pudo obtener el pallet",
                icon: "error"
            });
            console.error("Error al obtener pallet:", error);
        }
    }

    function handleOpenModalConfirm(event) {
        event.preventDefault();

        let idPallet = document.getElementById("IdPallet").value;

        if (idPallet === "") {
            Swal.fire({
                title: "¿Iniciar nuevo pallet?",
                text: "No hay un pallet en proceso. ¿Desea iniciar uno nuevo?",
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Sí, iniciar",
                cancelButtonText: "Cancelar"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetchIdPallet();
                }
            });
        } else {
            Swal.fire({
                title: "¿Cambio de pallet?",
                text: "Actualmente hay un pallet en proceso. ¿Desea cambiar a uno nuevo?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, cambiar",
                cancelButtonText: "Cancelar"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetchIdPallet();
                }
            });
        }
    }

</script>

<script>
    document.getElementById("btnAbrirPallet").addEventListener("click", handleOpenModalConfirm);
</script>

<!-- Carga Incial Formulario Inicio -->
<script>
     // Llamar la función cuando se cargue la página
     document.addEventListener('DOMContentLoaded', cargarSupervisores);
     document.addEventListener('DOMContentLoaded', cargarBasculas);
     document.addEventListener('DOMContentLoaded', cargarImpresoras);
     document.addEventListener('DOMContentLoaded', cargarMotivosParo);
     document.addEventListener('DOMContentLoaded', cargarPesoMerma);


    async function cargarSupervisores() {
        try {
            const response = await fetch('/MasterData/Get_Employes_Supervisor?Type=S');

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            // Intentamos parsear la respuesta como JSON
            const result = await response.json();

            // Verificar si result es un arreglo de supervisor
            if (!Array.isArray(result)) {
                console.error("La respuesta no es un arreglo de supervisor:", result);
                return;
            }

            const supervisor = result;
            const datalist = document.getElementById('supervisor');

            // Limpiar opciones previas
            datalist.innerHTML = '';

            // Rellenar el datalist con las opciones
            supervisor.forEach(supervisor => {
                const option = document.createElement('option');
                option.value = `${supervisor.Code} - ${supervisor.Name}`;
                option.id = supervisor.Code;  // Asignar el id con el valor de Code
                datalist.appendChild(option);
            });

             const datalistMerma = document.getElementById('supervisoresMerma');
            // Limpiar opciones previas
            datalistMerma.innerHTML = '';

             // Rellenar el datalistMerma con las opciones
            supervisor.forEach(supervisor => {
                const option = document.createElement('option');
                option.value = `${supervisor.Code} - ${supervisor.Name}`;
                option.id = supervisor.Code;  // Asignar el id con el valor de Code
                datalistMerma.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar supervisores:", error);
            alert("Hubo un problema al cargar los supervisores. Intenta de nuevo más tarde.");
        }
    }

    async function cargarBasculas() {
        try {
            const response = await fetch('/Basculas/PesosPorBascula?idBascula=');

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            // Intentamos parsear la respuesta como JSON
            const result = await response.json();

            // Verificar si result es un arreglo de Basculas
            if (!Array.isArray(result)) {
                console.error("La respuesta no es un arreglo de Basculas:", result);
                return;
            }

            const basculas = result;
            const dropdown = document.getElementById('dropdown-basculas');

            // Limpiar las opciones previas
            dropdown.innerHTML = '<option value="" disabled selected>Buscar o seleccionar...</option>';

            // Rellenar el select con las opciones
            basculas.forEach(bascula => {
                const option = document.createElement('option');
                option.value = bascula.IdBascula; // Asignamos el IdBascula como el valor de la opción
                option.textContent = `${bascula.IdBascula} - ${bascula.Name}`;  // Mostrar el Name y Ubicacion
                dropdown.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar Basculas:", error);
            alert("Hubo un problema al cargar las básculas. Intenta de nuevo más tarde.");
        }
    }

    async function cargarImpresoras() {
        try {
            const response = await fetch('/Basculas/Impresoras?idImpresora=');

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            // Intentamos parsear la respuesta como JSON
            const result = await response.json();

            // Verificar si result es un arreglo de impresoras
            if (!Array.isArray(result)) {
                console.error("La respuesta no es un arreglo de impresoras:", result);
                return;
            }

            const impresoras = result;
            const dropdown = document.getElementById('dropdown-impresoras');

            // Limpiar las opciones previas
            dropdown.innerHTML = '<option value="" disabled selected>Buscar o seleccionar...</option>';

            // Rellenar el select con las opciones
            impresoras.forEach(impresora => {
                const option = document.createElement('option');
                option.value = impresora.PrintCode; // Asignamos el IdBascula como el valor de la opción
                option.textContent = `${impresora.PrintCode} - ${impresora.PrintName}`;  // Mostrar el Name y Ubicacion
                dropdown.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar Basculas:", error);
            alert("Hubo un problema al cargar las impresoras. Intenta de nuevo más tarde.");
        }
    }

    async function cargarMotivosParo() {
       try {
            const response = await fetch('/MasterData/Get_StopTime_Motivos?Type=');

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            // Intentamos parsear la respuesta como JSON
            const result = await response.json();

            // Verificar si result es un arreglo de motivo
            if (!Array.isArray(result)) {
                console.error("La respuesta no es un arreglo de motivo:", result);
                return;
            }

            const motivos = result;
            const dropdown = document.getElementById('dropdown-motivo');

            // Limpiar las opciones previas
            dropdown.innerHTML = '<option value="" disabled selected>Buscar o seleccionar...</option>';

            // Rellenar el select con las opciones
            motivos.forEach(motivos => {
                const option = document.createElement('option');
                option.value = motivos.Code; // Asignamos el IdBascula como el valor de la opción
                option.textContent = `${motivos.Code} - ${motivos.Name}`;  // Mostrar el Name y Ubicacion
                dropdown.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar motivos:", error);
            alert("Hubo un problema al cargar las motivos. Intenta de nuevo más tarde.");
        }
    }

    async function cargarPesoMerma() {
       try {
            const response = await fetch('/Decrease/Type_Decrease');

            // Verificar si la respuesta es válida
            if (!response.ok) {
                throw new Error("Error en la respuesta del servidor");
            }

            // Intentamos parsear la respuesta como JSON
            const result = await response.json();

            // Verificar si result es un arreglo de motivo
            if (!Array.isArray(result)) {
                console.error("La respuesta no es un arreglo de pesoMerma:", result);
                return;
            }

            const pesoMermas = result;
            const dropdown = document.getElementById('dropdown-TypMerma');

            // Limpiar las opciones previas
            dropdown.innerHTML = '<option value="" disabled selected>Buscar o seleccionar...</option>';

            // Rellenar el select con las opciones
            pesoMermas.forEach(pesoMermas => {
                const option = document.createElement('option');
                option.value = pesoMermas.Code; // Asignamos el IdBascula como el valor de la opción
                option.textContent = `${pesoMermas.Code} - ${pesoMermas.Name}`;  // Mostrar el Name y Ubicacion
                dropdown.appendChild(option);
            });

        } catch (error) {
            console.error("Error al cargar pesoMermas:", error);
            alert("Hubo un problema al cargar las pesoMermas. Intenta de nuevo más tarde.");
        }
    }

</script>

<!-- Validacion Formulario Inicio -->
<script>

      // Función para validar si los campos están vacíos
    const validarCamposRequeridos = (campos) => {
        let valid = true;

        campos.forEach(campo => {
            const inputElement = document.getElementById(campo.id);
            if (!inputElement.value) {
                inputElement.classList.add('input-error');
                valid = false;
            } else {
                inputElement.classList.remove('input-error');
            }
        });

        return valid;
    };

    // Función para recoger los valores de los campos y crear el objeto de datos
    const obtenerDatosFormulario = () => {
         console.log("Inicio");
        const supervisorInput = document.getElementById('supervisorInput').value;
        console.log(supervisorInput);
        const piezasInput = document.getElementById('piezas').value;
        console.log(piezasInput);
        const lecturaBasculaInput = document.getElementById('lecturaBascula').value;
        console.log(lecturaBasculaInput);
        const basculaSeleccionadaInput = document.getElementById('dropdown-basculas').value;
        const impresoraSeleccionadaInput = document.getElementById('dropdown-impresoras').value;

        // Extraemos el ID antes del " - " en el valor del input
        const supervisorId = supervisorInput.split(" - ")[0]; // Esto obtiene solo el ID

        // Obtener la fecha actual (formato YYYY-MM-DD)
        const fechaActual = new Date();
        const fecha = fechaActual.toLocaleDateString('en-CA'); // YYYY-MM-DD

        // Obtener la hora actual (formato HH:MM:SS)
        const hora = fechaActual.toLocaleTimeString('es-ES'); // HH:MM:SS

        // Obtener los valores adicionales de los campos ocultos
        const docEntry = document.getElementById('DocEntry').value; // Campo DocEntry
        const idPallet = document.getElementById('IdPallet').value; // Campo IdPallet
        const itemCode = document.getElementById('ItemCode').value; // Campo ItemCode

        console.log(itemCode);


        return {
            employe: supervisorId,  // Ahora pasamos solo el ID
            piezas: parseFloat(piezasInput),
            netWeight: parseFloat(lecturaBasculaInput),
            grossWeight: parseFloat(lecturaBasculaInput),
            idScales: basculaSeleccionadaInput,
            print: impresoraSeleccionadaInput,
            fechaIncome: fecha,  // Fecha en formato YYYY-MM-DD
            timeIncome: hora,     // Hora en formato HH:MM:SS
            entryOf: docEntry, // DocEntry del input
            IdPallet: idPallet,  // IdPallet del input
            itemCode: itemCode
        };
    };

    // Función para mostrar un mensaje al usuario
       const mostrarMensaje = (mensaje, tipo) => {
        Swal.fire({
            title: tipo === 'error' ? '¡Error!' : tipo === 'warning' ? '¡Advertencia!' : 'Éxito',
            text: mensaje,
            icon: tipo,
            confirmButtonText: 'Aceptar'
        });
    };

    // Función para enviar los datos a la API
    const enviarDatosAPI = async (data) => {
        try {
            const response = await fetch('/Pallets/PalletsLines', {  // Cambia la URL según tu API
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                const responseData = await response.json();
                 fetchProdOrderWps(@docEntry);
    @* mostrarMensaje('Registro guardado con éxito: ' + responseData.message, 'success'); *@
            } else {
                mostrarMensaje('Hubo un error al guardar el registro', 'error');
            }
        } catch (error) {
            console.error('Error al enviar los datos:', error);
            mostrarMensaje('Error al conectar con la API', 'error');
        }
    };

    // Función principal que integra todo el flujo
    const guardarRegistroLectura = async () => {
        const camposRequeridos = [
            { id: 'supervisorInput' },
            { id: 'piezas' },
            { id: 'lecturaBascula' },
            { id: 'dropdown-basculas' },
            { id: 'dropdown-impresoras' },
            { id: 'IdPallet' }
        ];

        // Validar campos
        if (!validarCamposRequeridos(camposRequeridos)) {
            mostrarMensaje('Por favor, complete todos los campos requeridos', 'warning');
            return;
        }

        // Obtener los datos del formulario
        const data = obtenerDatosFormulario();
        console.log(data);
        // Enviar los datos a la API
        await enviarDatosAPI(data);
    };

    // Asignar la función al botón de Guardar
    document.getElementById('guardarBtn').addEventListener('click', guardarRegistroLectura);

    //Cerrar Pallet
    function cerrarPallet() {
        const idPallet = document.getElementById("IdPallet").value; // Obtener el valor del campo oculto IdPallet

        if (!idPallet) {
            Swal.fire("Error", "El ID del pallet no está disponible.", "error");
            return;
        }

        Swal.fire({
            title: "¿Estás seguro?",
            text: "¿Quieres cerrar este pallet? Esta acción no se puede deshacer.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, cerrar",
            cancelButtonText: "Cancelar"
        }).then(async (result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: "Cerrando pallet...",
                    text: "Por favor espera mientras procesamos la solicitud.",
                    icon: "info",
                    showCancelButton: false,
                    showConfirmButton: false,
                    allowOutsideClick: false
                });
                Swal.showLoading(); // Muestra el icono de carga

                try {
                    // Hacer una solicitud PUT a la API con el parámetro IdPallet
                    const response = await fetch(`/Pallets/Close_Pallets?IdPallet=${idPallet}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });

                    if (response.ok) {
                       Swal.fire("Cerrado", "El pallet ha sido cerrado con éxito.", "success")
        .then(() => {
            location.reload(); // Refrescar la página después de mostrar el mensaje de éxito
        });
                    } else {
                        Swal.fire("Error", "No se pudo cerrar el pallet.", "error");
                    }
                } catch (error) {
                    Swal.fire("Error", "Ocurrió un problema con la API.", "error");
                }
            } else {
                Swal.fire("Cancelado", "La acción ha sido cancelada.", "info");
            }
        });
    }

</script>

<!-- Tabla Formulario Inicio -->
<script>

     document.addEventListener("DOMContentLoaded", function () {
         fetchProdOrderWps(@docEntry);
     });

    const fetchProdOrderWps = async (docEntry) => {
         try {
              const response = await fetch(`/Production/WPS_Pallets?DocEntry=${docEntry}`);

             if (!response.ok) {
                 throw new Error(`Error HTTP: ${response.status}`);
             }

             const data = await response.json();
          console.log('Pallets obtenidos:', data);
          setProdOrdersWps(data);
         } catch (error) {
             setProdOrdersWps([]); // Manejo de errores: estado vacío.
             const errorMessage = error.message || "Error al obtener WPS";
             showToast(errorMessage, "error");
         }
     };

     const showToast = (message, type) => {
         Swal.fire({
             title: type === "error" ? "Error" : "Éxito",
             text: message,
             icon: type,
             confirmButtonText: "OK"
         });
     };

     const setProdOrdersWps = (data) => {
         const tbody = document.querySelector(".ordenes-wps-table tbody");
         const totalPesoNeto = document.getElementById("totalPesoNeto");
         const totalPesoBruto = document.getElementById("totalPesoBruto");

         tbody.innerHTML = ""; // Limpia la tabla antes de agregar nuevos datos

         if (!data || data.length === 0) {
             tbody.innerHTML = "<tr><td colspan='8' class='text-center'>No hay registros disponibles</td></tr>";
             totalPesoNeto.textContent = "0.00";
             totalPesoBruto.textContent = "0.00";
             return;
         }

         let totalNeto = 0;
         let totalBruto = 0;

         data.forEach((item, index) => {
             const row = document.createElement("tr");

             row.innerHTML = `
                 <td>${index + 1}</td>
                 <td>${item.Code}</td>
                 <td>${item.IdPaquete}</td>
                  <td>${formatDate(item.PallDate)} Hrs ${formatTime(item.PalletTime)}</td>

                 <td>${item.SerialAndBatch}</td>
                 <td>${item.WeightNet.toFixed(2)}</td>
                 <td>${item.WeightBrut.toFixed(2)}</td>
                 <td>
                     <button class="btn btn-danger btn-sm" onclick="eliminarRegistro(${item.DocEntry}, ${item.U_EntryOf} , ${item.LineId})">
                         <i class="fa fa-trash"></i>
                     </button>
                 </td>
             `;

             tbody.appendChild(row);

             // Actualizamos los totales
             totalNeto += item.WeightNet;
             totalBruto += item.WeightBrut;
         });

         // Establecemos los totales fuera de la tabla
         totalPesoNeto.textContent = totalNeto.toFixed(2);
         totalPesoBruto.textContent = totalBruto.toFixed(2);
     };


     // Función para formatear la fecha en formato DD/MM/YYYY
     const formatDate = (dateString) => {
         const date = new Date(dateString);
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
     };

     // Función para formatear la hora en HH:MM
     const formatTime = (timeString) => {
         if (!timeString) return "-";
         return timeString.substring(0, 2) + ":" + timeString.substring(2, 4);
     };

     // Función para eliminar un registro (simulada, ajusta según API)
    const eliminarRegistro = (docEntry, Code, lineId) => {
        Swal.fire({
            title: "¿Estás seguro?",
            text: "Esta acción no se puede deshacer.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, eliminar"
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    // Hacer una petición PATCH a la API
                    const response = await fetch(`/Production/WPS_DeleteLine_Pallet?EntryOf=${Code}&DocEntry=${docEntry}&IdLine=${lineId}`, {
                        method: "PATCH",
                        headers: { "Content-Type": "application/json" }
                    });

                    // Comprobar si la respuesta es exitosa
                    if (response.ok) {
                         fetchProdOrderWps(@docEntry);
                        Swal.fire("Eliminado", "El registro ha sido eliminado.", "success");
                    } else {
                        Swal.fire("Error", "No se pudo eliminar el registro.", "error");
                    }
                } catch (error) {
                    Swal.fire("Error", "Ocurrió un problema con la API.", "error");
                }
            }
        });
    };


</script>

<!-- Formulario Paros -->
<script>

        function cargarFormParo(docEntry, idMachine) {
            console.log("DocEntry: " + docEntry);
            console.log("IdMachine: " + idMachine);
            console.log("Cargando cargarFormParo...");


            // Abriendo el modal
            $('#modalPrincipal').modal('show');

            document.querySelector("#guardarParoBtn").style.display = "inline-block"; // Muestra el botón Guardar
            document.querySelector("#UpdateParoBtn").style.display = "none"; // Oculta el botón Actualizar

            // Evento cuando el modal se muestra completamente
            $('#modalPrincipal').on('shown.bs.modal', function () {
                console.log("Modal abierto correctamente");

                // Elimina eventos previos para evitar duplicaciones
                $("#guardarParoBtn").off("click").on("click", function () {
                    console.log("Botón Guardar clickeado");

                    // Validar campos antes de guardar
                    if (validarCampos()) {
                        console.log("Campos validados correctamente. Guardando...");

                        enviarDatos(docEntry, idMachine);

                        // Aquí puedes ejecutar la lógica de guardado
                    } else {
                        console.log("Hay campos con errores, no se puede guardar.");

                    }
                });
            });

            // Llamamos a la función para llenar las fechas y horas actuales
            llenarFechasYHorasActuales();

            console.log('Modal abierto para el DocEntry:', docEntry);
        }

        function llenarFechasYHorasActuales() {
            const ahora = new Date();

            // Formatear fecha en formato YYYY-MM-DD
            const fecha = ahora.toISOString().split('T')[0];

            // Formatear hora en formato HH:MM
            const hora = ahora.toTimeString().split(' ')[0].slice(0, 5);

            // Asignar valores a los inputs de inicio
            document.getElementById('fechaInicio').value = fecha;
            document.getElementById('horaInicio').value = hora;

            // Asignar valores a los inputs de fin (puedes sumar minutos o dejar igual)
            document.getElementById('fechaFin').value = fecha;
            document.getElementById('horaFin').value = hora;
        }

        function calcularTiempo() {
        const fechaInicio = document.getElementById('fechaInicio').value;
        const horaInicio = document.getElementById('horaInicio').value;
        const fechaFin = document.getElementById('fechaFin').value;
        const horaFin = document.getElementById('horaFin').value;

        // Verificar si los campos no están vacíos
        if (fechaInicio && horaInicio && fechaFin && horaFin) {
            // Crear objetos Date con la fecha y hora seleccionadas
            const inicio = new Date(`${fechaInicio}T${horaInicio}:00`);
            const fin = new Date(`${fechaFin}T${horaFin}:00`);

            // Calcular la diferencia en milisegundos
            const diferencia = fin - inicio;

            // Convertir milisegundos a horas
            const horas = diferencia / (1000 * 60 * 60);

            // Mostrar el resultado en el campo de tiempo
            document.getElementById('tiempoHrs').value = horas.toFixed(2); // 2 decimales
        }
    }

        // Escuchar cambios en los campos de fecha y hora
            document.getElementById('fechaInicio').addEventListener('change', calcularTiempo);
            document.getElementById('horaInicio').addEventListener('change', calcularTiempo);
            document.getElementById('fechaFin').addEventListener('change', calcularTiempo);
            document.getElementById('horaFin').addEventListener('change', calcularTiempo);

        function calcularTiempo() {
            const fechaInicio = document.getElementById('fechaInicio').value;
            const horaInicio = document.getElementById('horaInicio').value;
            const fechaFin = document.getElementById('fechaFin').value;
            const horaFin = document.getElementById('horaFin').value;

            // Verificar si los campos no están vacíos
            if (fechaInicio && horaInicio && fechaFin && horaFin) {
                // Crear objetos Date con la fecha y hora seleccionadas
                const inicio = new Date(`${fechaInicio}T${horaInicio}:00`);
                const fin = new Date(`${fechaFin}T${horaFin}:00`);

                // Verificar si la fecha de inicio es posterior a la fecha de fin
                if (fin < inicio) {
                    document.getElementById('tiempoHrs').value = "0";
                    return;
                }

                // Calcular la diferencia en milisegundos
                const diferencia = fin - inicio;

                // Convertir milisegundos a horas
                const horas = diferencia / (1000 * 60 * 60);

                // Mostrar el resultado en el campo de tiempo
                document.getElementById('tiempoHrs').value = horas.toFixed(2); // 2 decimales
                    calcularKgsParo();
            }
        }

        // Escuchar cambios en los campos de fecha y hora
        document.getElementById('fechaInicio').addEventListener('change', calcularTiempo);
        document.getElementById('horaInicio').addEventListener('change', calcularTiempo);
        document.getElementById('fechaFin').addEventListener('change', calcularTiempo);
        document.getElementById('horaFin').addEventListener('change', calcularTiempo);

            // Escuchar cambios en los campos de kgHr, tiempoHrs y kgsParo
        document.getElementById('kgHr').addEventListener('input', calcularKgsParo);
        document.getElementById('tiempoHrs').addEventListener('input', calcularKgsParo);
        document.getElementById('kgsParo').addEventListener('input', calcularKgsParo);

        function calcularKgsParo() {
            const kgHr = parseFloat(document.getElementById('kgHr').value);
            const tiempoHrs = parseFloat(document.getElementById('tiempoHrs').value);
            const kgsParo = parseFloat(document.getElementById('kgsParo').value);

            // Si 'kgHr' y 'tiempoHrs' tienen valores, calcular el resultado
            if (!isNaN(kgHr) && !isNaN(tiempoHrs)) {
                const resultado = kgHr * tiempoHrs;
                document.getElementById('kgsParo').value = resultado.toFixed(2); // Asignar resultado a kgsParo
            }

            // Si 'kgsParo' tiene un valor, calcular el resultado y actualizar los otros campos
            else if (!isNaN(kgsParo) && !isNaN(kgHr)) {
                const tiempoCalculado = kgsParo / kgHr;
                document.getElementById('tiempoHrs').value = tiempoCalculado.toFixed(2); // Asignar tiempo calculado
            }

            // Si 'kgsParo' tiene un valor, calcular el resultado y actualizar los otros campos
            else if (!isNaN(kgsParo) && !isNaN(tiempoHrs)) {
                const kgPorHrCalculado = kgsParo / tiempoHrs;
                document.getElementById('kgHr').value = kgPorHrCalculado.toFixed(2); // Asignar kg por hora calculado
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
        const docEntry = @Model.DocEntry;

            fetchTimeStop(docEntry);
        });

        //funcion para llenar paros
        async function fetchTimeStop(docEntry) {
            console.log('time Stop...', docEntry);
            try {
                const response = await fetch(`/Production/WPS_TimeStop?DocEntry=${docEntry}`);
                if (!response.ok) {
                    throw new Error("Error al obtener los datos");
                }
                const data = await response.json();
                console.log('Listado de timeStop...', data);
                llenarTablaParos(data);  // Llamamos a la función para llenar la tabla
            } catch (error) {
                console.error("Error al cargar el timeStop:", error);
                showToast("Error al cargar el timeStop", "error"); // Asegúrate de que showToast esté definido
            }
        }

        function llenarTablaParos(data) {
            const tbody = document.querySelector("#timeStopTable tbody"); // Obtener el tbody con el ID correcto
            tbody.innerHTML = ""; // Limpiar la tabla antes de llenarla

            data.forEach(item => {
                const row = document.createElement("tr");

                // Celdas de datos
                row.innerHTML = `
                    <td>${item.Folio}</td>
                        <td>${item.CreateDate === "1900-01-01T00:00:00" ? "No disponible" : formatDate(item.CreateDate)}</td>
                    <td>${item.ProcessName}</td>
                    <td>${item.MachineName}</td>
                    <td>${formatDate(item.DateStart)} ${item.TimeStart}</td>
                        <td>${formatDate(item.DateEnd)} ${item.TimeEnd}</td>
                    <td>${item.RemarksStart || item.RemarksEnd || "No disponible"}</td>
                    <td>${item.Status === "O" ? "Activo" : "Inactivo"}</td>
                       <td>
                            <button class="btn btn-danger btn-sm btnEliminar">Eliminar</button>
                            <button class="btn btn-primary btn-sm btnActualizar">Actualizar</button>
                            <button class="btn btn-success btn-sm btnSoT">Solicitud de Trabajo</button>
                        </td>
                `;

                   // Botón de eliminar con confirmación
                row.querySelector(".btnEliminar").onclick = async function () {
                    try {
                        const result = await Swal.fire({
                            title: "¿Estás seguro?",
                            text: "Esta acción eliminará el registro.",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#d33",
                            cancelButtonColor: "#3085d6",
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "Cancelar"
                        });

                        if (result.isConfirmed) {
                            console.log("Parámetros:", item.DocEntry, item.LineId);

                            // Esperar la confirmación de eliminación antes de remover la fila
                            await eliminarLineaParo(item.DocEntry, item.LineId);

                            // Si todo salió bien, eliminar la fila visualmente
                            row.remove();
                        }
                    } catch (error) {
                        console.error("Error al eliminar la línea:", error);
                        Swal.fire("Error", "No se pudo eliminar el registro.", "error");
                    }
                };

                    // Botón de actualizar
                row.querySelector(".btnActualizar").onclick = function () {
                    console.log("Actualizar elemento:", item.Folio);

                    // Llenar el modal con los datos
                    llenarModalConDatos(item);

                    // Mostrar el modal
                    $('#modalPrincipal').modal('show');
                };

                  // Botón de Solicitud
               // Botón de Solicitud de Trabajo
        row.querySelector(".btnSoT").onclick = function () {
            var formData = {
                DocDate: getCurrentDate(), // Fecha actual en formato YYYY-MM-DD
                Priority: 'H',
                CreateTime: getCurrentTime(), // Hora actual en formato HH:mm
                Location: '',
                DocStatus: 'A',
                Machine: item.MachineName, // Tomar el valor específico de la fila
                Others: 'Creado desde WPS',
                Remarks: '',
                MttoExt: 0 // Convertir a int
            };

            console.log("Datos enviados:", formData);

            // Validar campos obligatorios
            if (!formData.DocDate || !formData.Priority || !formData.CreateTime ) {
                Swal.fire({
                    icon: 'error',
                    title: 'Campos incompletos',
                    text: 'Por favor, complete todos los campos obligatorios.'
                });
                return;
            }

            // Confirmación antes de guardar
            Swal.fire({
                title: '¿Crear Solicitud de Trabajo?',
                text: "Se generará una nueva solicitud.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745', // Verde para acciones positivas
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, guardar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Enviar datos a la API
                    fetch("/Mtto/SolWork", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => response.json().then(data => {
                        if (!response.ok) {
                            throw data; // Lanza el error para capturarlo en el catch
                        }
                        return data;
                    }))
                    .then(data => {
                        if (data.isError) { // Validar si hay un error en la respuesta
                            Swal.fire('Error!', data.message || 'Ocurrió un error.', 'error');
                        } else {
                            Swal.fire('Guardado!', data.message || 'Solicitud creada exitosamente.', 'success')
                            .then(() => {
                                $('#solicitudModal').modal('hide'); // Cierra el modal si se usa Bootstrap
                                location.reload(); // Recargar la página
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', error.error || error.message || 'Error en la solicitud.', 'error');
                    });
                }
            });
        };



                tbody.appendChild(row);
            });
        }


        function llenarModalConDatos(item) {
                 // Mostrar el botón Actualizar y ocultar el botón Guardar
            document.querySelector("#guardarParoBtn").style.display = "none"; // Oculta el botón Guardar
            document.querySelector("#UpdateParoBtn").style.display = "inline-block"; // Muestra el botón Actualizar


            // Llenar los campos del modal con la información del item
                document.querySelector("#kgHr").value = item.WeightForHour || "";
            const dropdownMotivo = document.querySelector("#dropdown-motivo");
            dropdownMotivo.value = item.Folio || "";

            // Si el valor de Folio no coincide con ninguna opción, se puede agregar una opción seleccionada
            if (!dropdownMotivo.value) {
                // Si no encuentra un valor válido, podrías agregar una opción predeterminada o hacer que no esté seleccionado
                dropdownMotivo.selectedIndex = 0; // Selecciona el primer valor (por ejemplo, "Buscar o seleccionar...")
            }

            // Llenar los campos de fecha y hora de inicio de paro
                    document.querySelector("#fechaInicio").value = formatDateForInput(item.DateStart) || "";
            document.querySelector("#horaInicio").value = item.TimeStart || "";
            document.querySelector("#observacionesInicio").value = item.RemarksStart || "";

            // Llenar los campos de fecha y hora de fin de paro
                    document.querySelector("#fechaFin").value = formatDateForInput(item.DateEnd) || "";
            document.querySelector("#horaFin").value = item.TimeEnd || "";
            document.querySelector("#observacionesFin").value = item.RemarksEnd || "";

            // Llenar los campos de tiempo (si corresponde)
                document.querySelector("#tiempoHrs").value = item.TotalTime || "";
                document.querySelector("#kgsParo").value = item.WeightStop || "";

                // Marcar el proceso correspondiente (si aplica)
               if (item.IdProcess) {
                // Seleccionamos el radio button por su valor
                const radioButton = document.querySelector(`input[name="process"][value="${item.IdProcess}"]`);
                if (radioButton) {
                    radioButton.checked = true;
                } else {
                    console.log('Radio button no encontrado con value:', item.IdProcess);
                }
            }


                 // Asignar evento al botón Actualizar
            document.querySelector("#UpdateParoBtn").addEventListener("click", function() {
                console.log("Botón Actualizar clickeado");



                // Validar campos antes de actualizar
                if (validarCampos()) {
                    console.log("Campos validados correctamente. Actualizando..." );
                      actualizarDatos(item.DocEntry,  item.LineId );  // Ejecuta lógica de actualización
                } else {
                    console.log("Hay campos con errores, no se puede actualizar.");
                }
            });
        }

        function formatDateForInput(dateString) {
            if (!dateString) return "";

            const date = new Date(dateString);
            if (isNaN(date)) return ""; // Si la fecha es inválida, devolver una cadena vacía

            // Obtener el año, mes y día en formato adecuado
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Mes con 2 dígitos
            const day = String(date.getDate()).padStart(2, '0'); // Día con 2 dígitos

            return `${year}-${month}-${day}`;
        }

        async function eliminarLineaParo(docEntry, lineId) {
            try {
                // Mostrar mensaje de carga
                Swal.fire({
                    title: "Procesando...",
                    text: "Por favor espera...",
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                // Enviar la solicitud PATCH a la API
                const response = await fetch(`/Production/WPS_Line_UpdateStatus?DocEntry=${docEntry}&IdLine=${lineId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || "Hubo un error al eliminar la línea");
                }

                const data = await response.json();
                console.log("Línea eliminada o actualizada:", data);

                // Mostrar mensaje de éxito
                Swal.fire("Éxito", "La línea ha sido eliminada correctamente.", "success");

            } catch (error) {
                console.error("Error al eliminar la línea:", error);
                Swal.fire("Error", `Ocurrió un error: ${error.message}`, "error");
            } finally {
                Swal.close(); // Cerrar la animación de carga
            }
        }

        ///funcion para Guardardatos
       function enviarDatos(docEntry, idMachine) {
            // Mostrar confirmación antes de enviar
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Deseas guardar los datos?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, guardar',
                cancelButtonText: 'Cancelar',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Si el usuario confirma, mostrar el loading
                    Swal.fire({
                        title: 'Guardando...',
                        text: 'Por favor, espera mientras se guardan los datos.',
                        allowOutsideClick: false, // Deshabilitar cerrar al hacer clic fuera
                        didOpen: () => {
                            Swal.showLoading(); // Mostrar loading
                        }
                    });

                    // Capturar los datos del formulario
                    const stopTimer = capturarDatosFormulario(docEntry, idMachine, null);
                    console.log("Objeto StopTimer:", stopTimer);

                    // Enviar los datos al backend utilizando fetch
                    fetch("/Production/WPS_TimeStop", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(stopTimer)  // Enviamos los datos en formato JSON
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Datos guardados:", data);
                        // Ocultar el loading
                        Swal.close();
                        // Mostrar mensaje de éxito
                        Swal.fire({
                            title: 'Éxito',
                            text: 'Los datos se guardaron correctamente.',
                            icon: 'success',
                            confirmButtonText: 'Aceptar'
                            }).then(() => {
                                // Cerrar el modal

                                limpiarCamposFormulario();
                            });
                    })
                    .catch(error => {
                        // Ocultar el loading
                        Swal.close();
                        console.error("Error al guardar:", error);
                        // Mostrar mensaje de error
                        Swal.fire({
                            title: 'Error',
                            text: 'Hubo un problema al guardar los datos.',
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    });
                }
            });
        }

        // Función para capturar los valores del formulario
            function capturarDatosFormulario(docEntry, idMachine, idLine ) {
                const procesoSeleccionado = document.querySelector('input[name="process"]:checked');
                const stopTimer = {
                    U_IdTime: document.getElementById("dropdown-motivo").value || '',
                    U_IdProcess: procesoSeleccionado ? procesoSeleccionado.value : '', // Se obtiene el valor del radio button seleccionado
                    U_Machine: idMachine, // Si tienes un campo específico para la máquina, añádelo aquí
                    U_WeightForHour: parseFloat(document.getElementById("kgHr").value) || 0,
                    U_DateStart: document.getElementById("fechaInicio").value ? new Date(document.getElementById("fechaInicio").value) : null,
                    U_TimeStart: document.getElementById("horaInicio").value || '',
                    U_RemarksStart: document.getElementById("observacionesInicio").value || '',
                    U_DateEnd: document.getElementById("fechaFin").value ? new Date(document.getElementById("fechaFin").value) : null,
                    U_TimeEnd: document.getElementById("horaFin").value || '',
                    U_RemarksEnd: document.getElementById("observacionesFin").value || '',
                     U_TotalTime: parseFloat(document.getElementById("tiempoHrs").value) || 0,
                    U_WeightStop: parseFloat(document.getElementById("kgsParo").value) || 0,
                    U_Status: 'O', // Si tienes un campo para el estado, añade aquí
                    EntryOf:@docEntry

                    };
                    console.log(idLine)
             // Si idLine no es null, se agrega al JSON
            if (idLine !== null) {
                stopTimer.LineId = idLine;
                     stopTimer.DocEntry= docEntry;
            }

                return stopTimer;
            }

        function actualizarDatos(docEntry,  idLine) {
                         console.log("CidLine.", idLine );
            // Mostrar confirmación antes de actualizar
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Deseas actualizar los datos?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, actualizar',
                cancelButtonText: 'Cancelar',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Si el usuario confirma, mostrar el loading
                    Swal.fire({
                        title: 'Actualizando...',
                        text: 'Por favor, espera mientras se actualizan los datos.',
                        allowOutsideClick: false, // Deshabilitar cerrar al hacer clic fuera
                        didOpen: () => {
                            Swal.showLoading(); // Mostrar loading
                        }
                    });

                    const idMachine = '@Model.IdMachine';

                    // Capturar los datos del formulario
                        const stopTimer = capturarDatosFormulario(docEntry, idMachine,idLine);
                    console.log("Objeto StopTimer:", stopTimer);

                    // Enviar los datos al backend utilizando fetch con método PATCH
                            fetch(`/Production/WPS_TimeStop?DocEntry={docEntry}&IdLine={idLine}`, {  // Asegúrate de enviar docEntry como parte de la URL
                        method: "PATCH",  // Usamos PATCH para actualizar
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(stopTimer)  // Enviamos los datos en formato JSON
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Datos actualizados:", data);
                        // Ocultar el loading
                        Swal.close();
                        // Mostrar mensaje de éxito
                        Swal.fire({
                            title: 'Éxito',
                            text: 'Los datos se actualizaron correctamente.',
                            icon: 'success',
                            confirmButtonText: 'Aceptar'
                            }).then(() => {
                            // Cerrar el modal

                            limpiarCamposFormulario();
                        });
                    })
                    .catch(error => {
                        // Ocultar el loading
                        Swal.close();
                        console.error("Error al actualizar:", error);
                        // Mostrar mensaje de error
                        Swal.fire({
                            title: 'Error',
                            text: 'Hubo un problema al actualizar los datos.',
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    });
                }
            });
        }

        function limpiarCamposFormulario() {
            // Limpiar todos los campos del formulario
            document.querySelector("#kgHr").value = '';
            document.querySelector("#dropdown-motivo").value = '';
            document.querySelector("#fechaInicio").value = '';
            document.querySelector("#horaInicio").value = '';
            document.querySelector("#observacionesInicio").value = '';
            document.querySelector("#fechaFin").value = '';
            document.querySelector("#horaFin").value = '';
            document.querySelector("#observacionesFin").value = '';
            document.querySelector("#tiempoHrs").value = '';
            document.querySelector("#kgsParo").value = '';

            // Desmarcar los radio buttons
            const radioButtons = document.querySelectorAll('input[name="process"]');
            radioButtons.forEach(radio => radio.checked = false);

            $('#modalPrincipal').modal('hide');
           // Limpiar los campos del formulario
               const docEntry = @Model.DocEntry;

                fetchTimeStop(docEntry);

        }



</script>

<!--Validacion Formulario Paros -->
<script>
    function validarCampos() {
        let esValido = true;

        // Validar radio buttons (Proceso)
        const procesoSeleccionado = document.querySelector('input[name="process"]:checked');
        if (!procesoSeleccionado) {
            esValido = false;
            marcarErrorRadio("process");
        } else {
            quitarErrorRadio("process");
        }

        // Validar KG x HR
        const kgHr = document.getElementById("kgHr");
        if (!kgHr || !kgHr.value || kgHr.value <= 0) {
            esValido = false;
            marcarError("kgHr");
        } else {
            quitarError("kgHr");
        }

        // Validar Kgs. Paro
        const kgsParo = document.getElementById("kgsParo");
        if (!kgsParo || !kgsParo.value || kgsParo.value <= 0) {
            esValido = false;
            marcarError("kgsParo");
        } else {
            quitarError("kgsParo");
        }

        // Validar Motivo
        const motivo = document.getElementById("dropdown-motivo");
        if (!motivo || !motivo.value) {
            esValido = false;
            marcarError("dropdown-motivo");
        } else {
            quitarError("dropdown-motivo");
        }

        // Validar Fecha y Hora de Inicio
        const fechaInicio = document.getElementById("fechaInicio");
        const horaInicio = document.getElementById("horaInicio");
        if (!fechaInicio || !fechaInicio.value || !horaInicio || !horaInicio.value) {
            esValido = false;
            marcarError("fechaInicio");
            marcarError("horaInicio");
        } else {
            quitarError("fechaInicio");
            quitarError("horaInicio");
        }

        // Validar Fecha y Hora de Fin
        const fechaFin = document.getElementById("fechaFin");
        const horaFin = document.getElementById("horaFin");
        if (!fechaFin || !fechaFin.value || !horaFin || !horaFin.value) {
            esValido = false;
            marcarError("fechaFin");
            marcarError("horaFin");
        } else {
            quitarError("fechaFin");
            quitarError("horaFin");
        }

        return esValido;
    }

    // Función para marcar error en inputs generales
    function marcarError(id) {
        const campo = document.getElementById(id);
        if (campo) {
            campo.classList.add("border", "border-danger");
        } else {
            console.error(`Error: No se encontró el elemento con ID '${id}'`);
        }
    }

    // Función para quitar error en inputs generales
    function quitarError(id) {
        const campo = document.getElementById(id);
        if (campo) {
            campo.classList.remove("border", "border-danger");
        } else {
            console.error(`Error: No se encontró el elemento con ID '${id}'`);
        }
    }

    // Función especial para marcar error en el grupo de radio buttons
    function marcarErrorRadio(name) {
        const radios = document.getElementsByName(name);
        if (radios.length > 0) {
            radios.forEach(radio => {
                radio.nextElementSibling.classList.add("text-danger", "fw-bold"); // Resaltar label
            });
        } else {
            console.error(`Error: No se encontraron radio buttons con name '${name}'`);
        }
    }

    // Función para quitar error en el grupo de radio buttons
    function quitarErrorRadio(name) {
        const radios = document.getElementsByName(name);
        if (radios.length > 0) {
            radios.forEach(radio => {
                radio.nextElementSibling.classList.remove("text-danger", "fw-bold");
            });
        } else {
            console.error(`Error: No se encontraron radio buttons con name '${name}'`);
        }
    }


</script>

<!--opcion Mermas -->
<script>

    document.addEventListener("DOMContentLoaded", function () {
         fetchListadoMerma(@docEntry);
     });

    async function fetchListadoMerma(DocEntry) {
        const tbody = document.getElementById("mermasTableBody");
        const acumuladoElement = document.querySelector(".p-2.rounded.text-white"); // Elemento del acumulado

        try {
            // Mostrar un mensaje de carga
            tbody.innerHTML = `<tr><td colspan="4" class="text-center text-primary">🔄 Cargando...</td></tr>`;
            acumuladoElement.textContent = "Cargando..."; // Indicar carga en el acumulado

            const response = await fetch(`/Decrease/Decrease?DocEntry=${DocEntry}`);

            if (!response.ok) {
                throw new Error("Error al cargar listado de merma");
            }

            const data = await response.json();

            // Verificar si los datos son válidos
            if (!Array.isArray(data) || data.length === 0) {
                tbody.innerHTML = `<tr><td colspan="4" class="text-center text-warning">⚠️ No hay registros de merma.</td></tr>`;
                acumuladoElement.textContent = "0 kg"; // Mostrar 0 si no hay datos
                return;
            }

            // Limpiar la tabla antes de agregar nuevos datos
            tbody.innerHTML = "";

            // Calcular el acumulado sumando los pesos
            let acumuladoTotal = 0;

            // Agregar filas dinámicamente
            data.forEach(merma => {
                acumuladoTotal += merma.Weight; // Sumar el peso total

                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${merma.LineId}</td>
                    <td>${merma.Name}</td>
                    <td>${merma.Weight} kg</td>
                    <td>
                        <button class="btn btn-danger btn-sm" onclick="eliminarMerma(${merma.DocEntry}, ${merma.LineId})">
                            🗑️ Eliminar
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Mostrar el acumulado formateado
            acumuladoElement.textContent = `${acumuladoTotal.toFixed(2)} kg`;

        } catch (error) {
            console.error("Error al cargar listado de merma:", error);

            Swal.fire({
                icon: "error",
                title: "Error",
                text: "No se pudo cargar el listado de merma. Intenta nuevamente.",
                confirmButtonColor: "#d33"
            });

            tbody.innerHTML = `<tr><td colspan="4" class="text-center text-danger">❌ Error al obtener datos</td></tr>`;
            acumuladoElement.textContent = "0 kg"; // Si hay error, mostrar 0 kg
        }
    }


    async function eliminarMerma(docEntry, idLine) {
        Swal.fire({
            title: "¿Estás seguro?",
            text: "¡Esta acción no se puede revertir!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Sí, eliminar",
            cancelButtonText: "Cancelar"
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    // Mostrar mensaje de carga
                    Swal.fire({
                        title: "Eliminando...",
                        text: "Por favor, espera...",
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const response = await fetch(`/Decrease/DelDecrease?DocEntry=${docEntry}&IdLine=${idLine}`, {
                        method: "PATCH",
                        headers: { "Content-Type": "application/json" }
                    });

                    if (response.ok) {
                        // Recargar listado después de la eliminación
                        await fetchListadoMerma(docEntry);

                        Swal.fire({
                            icon: "success",
                            title: "Eliminado",
                            text: "La merma ha sido eliminada exitosamente.",
                            confirmButtonColor: "#3085d6"
                        });
                       
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "No se pudo eliminar la merma. Inténtalo de nuevo.",
                            confirmButtonColor: "#d33"
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Ocurrió un problema con la API.",
                        confirmButtonColor: "#d33"
                    });
                }
            }
        });
    }


    // Llamar a la función cuando sea necesario (puedes llamarla al abrir el modal)

</script>

<!--Guardar Mermas -->
<script>

    async function sendMermaData(docEntry) {
        // Obtener referencias de los elementos
        const supervisorInput = document.getElementById("supervisoresMermaInput");
        const tipoMerma = document.getElementById("dropdown-TypMerma");
        const pesoMerma = document.getElementById("pesoMerma");
        const supervisorDatalist = document.getElementById("supervisoresMerma");

        // Limpiar estilos previos
        supervisorInput.style.border = "";
        tipoMerma.style.border = "";
        pesoMerma.style.border = "";

        let errores = [];

        // Validar que el supervisor ingresado esté en la lista
        const supervisorSeleccionado = Array.from(supervisorDatalist.options).some(
            (option) => option.value === supervisorInput.value.trim()
        );

        if (!supervisorSeleccionado) {
            errores.push("Por favor, selecciona un supervisor válido.");
            supervisorInput.style.border = "2px solid red";
        }

        // Validar Tipo de Merma
        if (!tipoMerma.value.trim()) {
            errores.push("Por favor, selecciona un tipo de merma.");
            tipoMerma.style.border = "2px solid red";
        }

        // Validar Peso de Merma
        const peso = parseFloat(pesoMerma.value.trim());
        if (isNaN(peso) || peso <= 0) {
            errores.push("Por favor, ingresa un peso de merma válido.");
            pesoMerma.style.border = "2px solid red";
        }

        // Mostrar errores si existen
        if (errores.length > 0) {
            Swal.fire({
                icon: "error",
                title: "Error de validación",
                html: errores.join("<br>"),
            });
            return;
        }

       // Confirmación antes de enviar
    Swal.fire({
        title: "¿Estás seguro?",
        text: "Se enviará la información de la merma.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, guardar",
        cancelButtonText: "Cancelar",
    }).then((result) => {
        if (result.isConfirmed) {
            // Mostrar Loading
            Swal.fire({
                title: "Guardando...",
                text: "Por favor, espera mientras se guarda la información.",
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Construir el objeto JSON
            const data = {
                Employe: parseInt(supervisorInput.value.trim(), 10),
                DreaseType: tipoMerma.value.trim(),
                EntryOf: docEntry, // Ajustar según el caso
                Weight: peso
            };

            // Enviar datos a la API
            postMermaData(data);
        }
    });
    }

    // Función para enviar el POST a la API
    async function postMermaData(data) {
        try {
            const response = await fetch("/Decrease/Decrease", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error("Error al guardar la merma.");
            }

            Swal.fire({
                icon: "success",
                title: "Guardado exitoso",
                text: "La merma ha sido registrada correctamente.",
            });


            // Limpiar los campos
            document.getElementById("supervisoresMermaInput").value = "";
            document.getElementById("dropdown-TypMerma").value = "";
            document.getElementById("pesoMerma").value = "";

             fetchListadoMerma(@docEntry);

        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Hubo un problema al guardar la merma.",
            });
        }
    }


 </script>

<script>

    document.getElementById("btnFinalizar").addEventListener("click", async function() {
        Swal.fire({
            title: "¿Finalizar proceso?",
            text: "Esta acción no se puede deshacer.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Sí, finalizar",
            cancelButtonText: "Cancelar",
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6"
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        // Mostrar el loading antes de la llamada API
                        Swal.showLoading();

               try {
                const response = await fetch(`/Production/WPS_UpdateStatusEnd?DocEntry=${@docEntry}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
              
                    }
                });

                if (response.ok) {
                    // Si la respuesta es exitosa, mostramos un mensaje de éxito
                    Swal.fire("Finalizado", "El proceso se ha completado con éxito.", "success");
                    // Refresca la página después de una respuesta exitosa
                    location.reload();
                } else {
                    // Si no es exitosa, mostramos un mensaje de error
                    Swal.fire("Error", "No se pudo finalizar el proceso. Intenta nuevamente.", "error");
                }
            } catch (error) {
                // En caso de que haya un error con la solicitud (por ejemplo, problemas de red)
                console.error("Error en la solicitud:", error);
                Swal.fire("Error", "Ocurrió un problema con la API. Intenta nuevamente.", "error");
            }


            }
        });
    });

</script>

<script>
      async function cargarReportePallet(DocEntry) {
        const btnGenerarReporte = document.getElementById("btnGenerarReporte");
        const originalHTML = btnGenerarReporte.innerHTML; // Guardamos el contenido original del botón

        try {
            // Mostrar spinner y deshabilitar botón
            btnGenerarReporte.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generando...`;
            btnGenerarReporte.disabled = true;

            // Hacer la solicitud al backend pasando DocEntry
            let response = await fetch("/Production/WPS_PrintPallet?DocEntry=" + DocEntry, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            });

            // Verificar si la respuesta es exitosa
            if (!response.ok) {
                throw new Error("Error en la solicitud al servidor.");
            }

            // Verificar el tipo de contenido de la respuesta
            let contentType = response.headers.get("content-type");

            if (contentType && contentType.includes("application/pdf")) {
                // Convertir la respuesta en un blob (archivo)
                let blob = await response.blob();
                let pdfUrl = URL.createObjectURL(blob); // Crear URL del PDF

                // Mostrar el PDF en el iframe del modal
                let pdfIframe = document.getElementById("pdfIframe");
                if (pdfIframe) {
                    pdfIframe.src = pdfUrl;

                    // Mostrar el modal
                    let reportModal = new bootstrap.Modal(document.getElementById("reportModal"));
                    reportModal.show();
                } else {
                    alert("No se encontró el elemento para mostrar el PDF.");
                }
            } else {
                // Si la respuesta no es un PDF, intentar parsear como JSON
                let data = await response.json();
                alert("Error al generar el reporte: " + (data?.Message || "Respuesta inválida del servidor."));
            }
        } catch (error) {
            console.error("Error al enviar la solicitud:", error);
            alert("Error de conexión con el servidor.");
        } finally {
            // Restaurar el botón a su estado original
            btnGenerarReporte.innerHTML = originalHTML;
            btnGenerarReporte.disabled = false;
        }
    }



    // Función para imprimir el PDF
    document.addEventListener("DOMContentLoaded", function () {
        let btnImprimir = document.getElementById("btnImprimir");
        if (btnImprimir) {
            btnImprimir.addEventListener("click", function () {
                let iframe = document.getElementById("pdfIframe");
                if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.print();
                } else {
                    alert("No se puede imprimir el documento.");
                }
            });
        }
    });
</script>


<script>
       function getCurrentTime() {
        let now = new Date();
        let hours = now.getHours().toString().padStart(2, '0');
        let minutes = now.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }
        // Función para obtener la fecha actual en formato YYYY-MM-DD
    function getCurrentDate() {
        let now = new Date();
        let year = now.getFullYear();
        let month = (now.getMonth() + 1).toString().padStart(2, '0'); // Mes en 2 dígitos
        let day = now.getDate().toString().padStart(2, '0'); // Día en 2 dígitos
        return `${year}-${month}-${day}`;
    }

@*     document.addEventListener("DOMContentLoaded", function() {
        document.getElementById("btnGuardar").addEventListener("click", function() {
            // Obtener los valores de los campos del formulario
            var formData = {
                DocDate:  getCurrentDate(),
                Priority: 'H',
                CreateTime:getCurrentTime(),
                Location: '',
                DocStatus: 'A',
                Machine: document.getElementById("producto").value,
                Others:'Creado desde WPS',
                Remarks: '',
                MttoExt: 0 // Convertir a int
            };
            console.log(formData);

            // Validar que los campos obligatorios estén completos
            if (!formData.DocDate || !formData.Priority || !formData.CreateTime || !formData.Location || !formData.Machine  || !formData.Machine) {
                Swal.fire({
                    icon: 'error',
                    title: 'Campos incompletos',
                    text: 'Por favor complete todos los campos obligatorios.'
                });
                return;
            }

            // Confirmar antes de enviar
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Deseas guardar esta solicitud?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, guardar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Enviar los datos al controlador usando fetch
                        fetch("/Mtto/SolWork", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formData)
                        })
                        .then(response => {
                            return response.json().then(data => {
                                if (!response.ok) {
                                    throw data; // Lanza el error para que lo capture el catch
                                }
                                return data;
                            });
                        })
                        .then(data => {
                            if (data.isError) { // Ahora verificamos isError en lugar de success
                                Swal.fire(
                                    'Error!',
                                    data.message || 'Ocurrió un error inesperado.',
                                    'error'
                                );
                            } else {
                                Swal.fire(
                                    'Guardado!',
                                    data.message || 'Operación exitosa.',
                                    'success'
                                ).then(() => {
                                    $('#solicitudModal').modal('hide');
                                    location.reload();
                                });
                            }
                        })
                        .catch(error => {
                            Swal.fire(
                                'Error!',
                                error.error || error.message || 'Error al procesar la solicitud.',
                                'error'
                            );
                        });



                }
            });
        });
    });
 *@
</script>