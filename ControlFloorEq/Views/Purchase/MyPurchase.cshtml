@model dynamic
@{
}
<!-- DataTables CSS -->
@* <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
 *@

<style>
    /* Fondo negro en la cabecera */
    /* Fondo negro y texto blanco para los campos de entrada y el encabezado */


    thead input,
    thead select {
        background-color: #333; /* Fondo oscuro para los inputs */
        color: #fff; /* Texto blanco */
        border: 1px solid #666; /* Borde para los inputs */
    }

    thead th {
        color: #fff; /* Texto blanco para los encabezados */
        padding: 10px; /* Para que haya espacio en el encabezado */
    }


    /* Estilo para el placeholder (texto de ayuda) en los inputs */
    thead input::placeholder {
        color: #bbb; /* Color gris claro para el texto de los placeholders */
    }


    /* Estilos para los estados */
    .status-pending {
        background-color: gold;
        color: black;
        font-weight: bold;
    }

    .status-approved {
        background-color: green;
        color: white;
        font-weight: bold;
    }

    .status-rejected {
        background-color: firebrick;
        color: white;
        font-weight: bold;
    }
    /* Contenedor para los botones */
    /* Contenedor para los botones dentro de la celda de la tabla */
    .button-container {
        display: flex;
        justify-content: space-between; /* Espacio entre los botones */
        width: 100%; /* Asegura que el contenedor ocupe todo el ancho de la celda */
    }

    /* Asegurarse de que la tabla y su contenedor ocupen todo el ancho disponible */
    .dt-responsive {
        width: 100%; /* Asegura que la tabla sea 100% ancha dentro de su contenedor */
        overflow-x: auto; /* Habilita el desplazamiento horizontal si la tabla es más ancha que el contenedor */
    }

    /* Evitar que el contenedor del wrapper cause un desbordamiento innecesario */
    .dataTables_wrapper {
        width: 100%; /* Asegura que el contenedor de la tabla ocupe todo el ancho */
        overflow-x: auto; /* Permite desplazarse horizontalmente si la tabla es más ancha */
    }



    /* Para garantizar que los botones en la tabla no se desborden */
    table.dataTable {
        width: 100% !important; /* Fuerza la tabla a ocupar todo el ancho del contenedor */
    }

</style>

<div class="container-fluid p-0">

    <div class="mb-3">
        <h1 class="h3 d-inline align-middle">Mis Compras</h1>

    </div>

    <div class="row">
        <div class="col-12">

            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Listado de Compras</h5>

                </div>
                <div class="card-body">
                    <div class="dt-responsive table-responsive">
                        <div id="simpletablePedAnt_wrapper" class="dataTables_wrapper dt-bootstrap4">


                            <table class="table table-striped table-bordered table-hover">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>N° de Solicitud</th>
                                        <th>Fecha De Creación</th>
                                        <th>Estatus</th>
                                        <th>Nombre</th>
                                        <th>N° Documento de Autorización</th>
                                    </tr>
                                    <tr>
                                        <th></th> <!-- Para la numeración -->
                                        <th><input type="text" class="form-control filtro-columna" placeholder="Filtrar..." /></th>                                        
                                        <th><input type="text" class="form-control filtro-columna" placeholder="Filtrar..." /></th>

                                        <th>
                                            <select id="filterStatus" class="form-control">
                                                <option value="">Todos</option>
                                                <option value="O">Abierto</option>
                                                <option value="C">Cerrado</option>
                                                <option value="P">Pendiente</option>
                                                
                                            </select>
                                        </th>
                                        <th><input type="text" class="form-control filtro-columna" placeholder="Filtrar..." /></th>
                                        <th><input type="text" class="form-control filtro-columna" placeholder="Filtrar..." /></th>


                                        <th></th> <!-- Para la columna de acciones -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null)
                                    {
                                        int index = 1; // Inicializamos el contador
                                        foreach (var doc in Model)
                                        {
                                            <tr>
                                                <td>@index</td> <!-- Número de fila -->
                                                <td>@doc.DocNum</td>
                                                <td>@(doc.DocDate != null ? Convert.ToDateTime(doc.DocDate).ToString("dd/MM/yyyy") : "N/A")</td>

                                                <!-- Cambio de Estatus -->
                                                <td>
                                                    @{
                                                        string statusText = doc.DocStatus switch
                                                        {
                                                            "O" => "Abierto",
                                                            "C" => "Cerrado",
                                                            "P" => "Pendiente",
                                                            _ => "Desconocido"
                                                        };

                                                        string statusClass = doc.DocStatus switch
                                                        {
                                                            "O" => "status-pending",
                                                            "C" => "status-approved",
                                                            "P" => "status-rejected",
                                                            _ => ""
                                                        };
                                                    }
                                                    <span class="@statusClass" title="@statusText">@statusText</span>
                                                </td>


                                                <td>@doc.ReqName</td>
                                                <td>@doc.NumAut</td>
                                                <td>
                                                    <div class="button-container">
                                                        <button data-code="@doc.DocEntry" onclick="openDetailModal(this)" class="btn btn-info">
                                                            <i class="fa fa-eye"></i> Ver Detalle
                                                        </button>
                                                     

                                                    </div>


                                                </td>

                                            </tr>
                                            index++; // Aumentamos el contador en cada iteración
                                        }
                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<!-- Modal para mostrar detalles del documento -->
<div id="detailModal" class="modal fade" tabindex="-1" aria-labelledby="solicitudCompraLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle de Productos</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Código</th>
                            <th>Descripción</th>
                            <th>Cantidad</th>
                            @* <th>Precio</th> *@
                        </tr>
                    </thead>
                    <tbody id="modalProductsBody">
                        <!-- Aquí se insertarán los productos dinámicamente -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>


<script>
        $(document).ready(function () {
        let table = $('.table').DataTable({
            "paging": true,      // Activa la paginación
            "ordering": true,    // Activa el ordenamiento
            "searching": true,   // Activa la búsqueda general
            "info": true,        // Muestra el estado de la tabla
            "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "Todos"]],
            "language": {
                "search": "Buscar:",
                "lengthMenu": "Mostrar _MENU_ registros",
                "info": "Mostrando _START_ a _END_ de _TOTAL_ registros",
                "paginate": {
                    "next": "Siguiente",
                    "previous": "Anterior"
                }
            },
            initComplete: function () {
                // Filtros en cada columna
                this.api().columns().every(function () {
                    let column = this;
                    $('input.filtro-columna', this.header()).on('keyup change', function () {
                        if (column.search() !== this.value) {
                            column.search(this.value).draw();
                        }
                    });
                });
            }
        });

        // Filtro de estado con Select
        $('#filterStatus').on('change', function () {
            table.column(5).search(this.value).draw();
        });
    });


</script>


<script>
    function openDetailModal(button) {
        let docCode = button.getAttribute("data-code");

        $.ajax({
            url: `/Purchase/MyPurchasenLineas?DocEntry=${docCode}`,
            type: "GET",
            dataType: "json",
            success: function(response) {
                let modalBody = document.getElementById("modalProductsBody");
                modalBody.innerHTML = "";

                if (response.length > 0) {
                    response.forEach(product => {
                        let row = `
                            <tr>
                                <td>${product.ItemCode}</td>
                                <td>${product.Description}</td>
                                <td>${product.Quantity}</td>

                            </tr>
                        `;
                        modalBody.innerHTML += row;
                    });
                } else {
                    modalBody.innerHTML = `<tr><td colspan="6" class="text-center">No hay productos</td></tr>`;
                }

                $("#detailModal").modal("show");
            },
            error: function() {
                alert("Error al obtener los detalles del documento.");
            }
        });
    }


</script>
