@model dynamic
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    int CallId = Model.CallId;
    string IdSOT = Model.IdSolWor;
    string CardCode = Model.CardCode;
    string xModule = "Mtto";
}
<!-- Estilos personalizados -->

<style>
    .activity-table {
        max-width: 100%;
        overflow-x: auto;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.1);
    }

    th, td {
        white-space: nowrap;
        padding: 12px;
        text-align: center;
    }

    .large-button {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .large-button i {
            font-size: 18px;
        }

        .large-button:hover, .active-tab {
            background-color: #0d6efd;
            color: white;
        }

</style>
<style>
    .upload-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-top: 20px;
    }

    .upload-box {
        width: 23%;
        padding: 20px;
        border: 2px dashed #007bff;
        border-radius: 10px;
        text-align: center;
        cursor: pointer;
        transition: 0.3s;
        background-color: #f8f9fa;
    }

        .upload-box:hover {
            background-color: #e9ecef;
        }

    .file-list {
        margin-top: 10px;
        font-size: 14px;
    }

    .adjuntar-btn-container {
        display: flex;
        align-items: center;
        justify-content: flex-end; /* Alineado a la derecha */
        margin-top: 10px;
    }

    .btn-icon img {
        width: 20px;
        height: 20px;
        margin-right: 5px;
    }
</style>

<div class="container-fluid p-0">
    <div class="mb-3">
        <a href="javascript:window.history.back();">
            ⬅ Regresar
        </a>
        <h1 class="h3 d-inline align-middle">Orden de Servicio <strong># @Model.DocNum</strong></h1>

        <input type="text" id="CallId" value="@Model.CallId" hidden="hidden" />

    </div>

    <div class="col-md-12">

        <div class="card card-body">
            <div class="row">
                <div class="col-md-3">
                    <p><strong>Doc Num:</strong> @Model.DocNum</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Descripción:</strong> @Model.Subject</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Cliente:</strong> @Model.CardCode - @Model.CardName</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Prioridad:</strong> @Model.Priority - @Model.NamePriority</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Fecha:</strong> @Model.DocDate.ToString("yyyy-MM-dd")</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Hora de Creación:</strong> @Model.CreateTime</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Ubicación:</strong> @Model.Location</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Tipo de Mantenimiento:</strong> @Model.TypeMtto - @Model.TypeNameMtto</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Artículo:</strong> @Model.ItemCode - @Model.ItemName</p>
                </div>
                <div class="col-md-3">
                    <p><strong>ID Solicitud Trabajo:</strong> @Model.IdSolWor</p>
                </div>

                <div class="col-md-3">
                    <p>
                        <strong>Tipo de Mantenimiento:</strong>
                        @if (Convert.ToInt32(Model.MttoExt) == 1)
                        {
                            <text>Externo</text>
                        }
                        else
                        {
                            <text>Normal</text>
                        }
                    </p>
                </div>



            </div>
        </div>

    </div>
    <!-- Botones de pestañas -->
    <div class="tab-buttons d-flex flex-wrap gap-2 mb-4 justify-content-center">
        @*  <button class="btn btn-outline-primary large-button active-tab" onclick="setActiveTab('actividades', this)">
            <i class="fas fa-tasks"></i> Actividades
        </button>
        <button class="btn btn-outline-primary large-button" onclick="setActiveTab('traslado', this)">
            <i class="fas fa-truck"></i> Solicitud de traslado
        </button>
        <button class="btn btn-outline-primary large-button" onclick="setActiveTab('compra', this)">
            <i class="fas fa-shopping-cart"></i> Solicitud de compra
        </button>
        <button class="btn btn-outline-primary large-button" onclick="setActiveTab('consumo', this)">
            <i class="fas fa-box-open"></i> Consumo de Materiales
        </button>
        <button class="btn btn-outline-primary large-button" onclick="setActiveTab('externo', this)">
            <i class="fas fa-tools"></i> Mantenimiento Externo
        </button>
        <button class="btn btn-outline-primary large-button" onclick="setActiveTab('evidencias', this)">
            <i class="fas fa-camera"></i> Evidencias
        </button> *@
        <button class="btn btn-outline-primary large-button active-tab" data-tab="actividades">
            <i class="fas fa-tasks"></i> Actividades
        </button>
        <button class="btn btn-outline-primary large-button" data-tab="traslado">
            <i class="fas fa-truck"></i> Solicitud de Materiales
        </button>
        <button class="btn btn-outline-primary large-button" data-tab="compra">
            <i class="fas fa-shopping-cart"></i> Solicitud de compra
        </button>
        <button class="btn btn-outline-primary large-button" data-tab="consumo">
            <i class="fas fa-box-open"></i> Consumo y Devolución de Materiales
        </button>
        <button class="btn btn-outline-primary large-button" data-tab="externo">
            <i class="fas fa-tools"></i> Mantenimiento Externo
        </button>
        <button class="btn btn-outline-primary large-button" data-tab="evidencias">
            <i class="fas fa-camera"></i> Evidencias
        </button> *
    </div>


    <div class="col-md-12">
        <div class="card card-body">
            <div class="row">

                <!-- Contenido de las pestañas Actividades-->
                <div id="actividades" class="tab-content">

                    @if (Convert.ToInt32(Model.MttoExt) == 1)
                    {
                        <button class="btn btn-primary mb-3" id="agregarActividadExternaBtn" data-bs-toggle="modal" data-bs-target="#agregarActividaExternaModal">
                            Agregar Actividad Externa
                        </button>
                    }
                    else
                    {
                        <!-- Botón para abrir el modal -->
                        <button class="btn btn-primary mb-3" id="agregarActividadBtn" data-bs-toggle="modal" data-bs-target="#agregarActividadModal">
                            Agregar Actividad
                        </button>
                        <!-- Tabla de Actividades -->
                        <div class="activity-table">
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered table-sm">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Técnico / Mecánico</th>
                                            <th>Actividad</th>
                                            <th>Fecha inicial</th>
                                            <th>Hora inicial</th>
                                            <th>Hora final</th>
                                            <th>Tiempo planeado</th>
                                            <th>Tiempo real</th>
                                            <th>Comentarios</th>
                                            <th>Cotizar</th>
                                            <th>Generar</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Aquí se llenarán los datos dinámicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Modal de Actividades -->
                        <div class="modal fade" id="agregarActividadModal" tabindex="-1" aria-labelledby="agregarActividadModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="agregarActividadModalLabel">Agregar Actividad</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="mb-3">
                                            <label for="dropdown-tecnicos" style="margin-bottom: 8px; display: block;">
                                                Selecciona un Técnico:
                                            </label>
                                            <input list="tecnico" id="tecnicoInput" class="form-control" placeholder="Selecciona o escribe un Técnico" required>
                                            <datalist id="tecnico"></datalist>
                                            <div class="invalid-feedback">Seleccione un técnico.</div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="fechaInicial" class="form-label">Fecha inicial</label>
                                                <input type="date" class="form-control" id="fechaInicial" required>
                                                <div class="invalid-feedback">Ingrese la fecha inicial.</div>
                                            </div>
                                            <div class="col-md-3 mb-3">
                                                <label for="horaInicial" class="form-label">Hora inicial</label>
                                                <input type="time" class="form-control" id="horaInicial" required>
                                                <div class="invalid-feedback">Ingrese la hora inicial.</div>
                                            </div>
                                            <div class="col-md-3 mb-3">
                                                <label for="horaFinal" class="form-label">Hora final</label>
                                                <input type="time" class="form-control" id="horaFinal" required>
                                                <div class="invalid-feedback">Ingrese la hora final.</div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="tiempoPlaneado" class="form-label">Tiempo planeado</label>
                                                <input type="number" class="form-control" id="tiempoPlaneado" placeholder="Tiempo en minutos" required readonly>
                                                <div class="invalid-feedback">Ingrese el tiempo planeado.</div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="tiempoReal" class="form-label">Tiempo real</label>
                                                <input type="number" class="form-control" id="tiempoReal" placeholder="Tiempo en minutos" required>
                                                <div class="invalid-feedback">Ingrese el tiempo real.</div>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label for="comentarios" class="form-label">Comentarios</label>
                                            <textarea class="form-control" id="comentarios" rows="3" placeholder="Comentarios" required></textarea>
                                            <div class="invalid-feedback">Ingrese los comentarios.</div>
                                        </div>

                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                            <button type="button" class="btn btn-primary" id="guardarBtn">Guardar</button>
                                        </div>


                                    </div>
                                </div>
                            </div>
                        </div>

                        <script>
                                       // Evento de "Guardar"
                            document.getElementById("guardarBtn").addEventListener("click", function() {
                                // Obtener los valores de los campos
                                var tecnico = document.getElementById("tecnicoInput").value;
                                var fechaInicial = document.getElementById("fechaInicial").value;
                                var horaInicial = document.getElementById("horaInicial").value;
                                var horaFinal = document.getElementById("horaFinal").value;
                                var tiempoReal = document.getElementById("tiempoReal").value;
                                var comentarios = document.getElementById("comentarios").value;

                                var cardCode = "@CardCode"; // Como cadena
                                var idSOT = "@IdSOT"; // Como número
                                var tiempoPlaneado = document.getElementById("tiempoPlaneado").value;

                                // Verificar que los campos obligatorios no estén vacíos
                                if (!tecnico || !fechaInicial || !horaInicial || !horaFinal || !tiempoReal || !comentarios) {
                                    Swal.fire('Error!', 'Todos los campos son obligatorios.', 'error');
                                    return;
                                }

                                const startTimeFormatted = convertirHora24(horaInicial);
                                const endTimeFormatted = convertirHora24(horaFinal);

                                // Crear el objeto de datos a enviar
                                var activityData = {
                                    ActivityCode: 0, // Puedes generar un código si es necesario

                                    ActivityDate: fechaInicial, // Asegúrate de que el formato de la fecha sea adecuado
                                    StartDate: fechaInicial , // Fecha y hora inicial
                                    StartTime: startTimeFormatted, // Hora de inicio
                                    EndDueDate: fechaInicial, // Si tienes fecha de fin, cámbiala
                                    EndTime: endTimeFormatted, // Hora final
                                    Details: comentarios, // Comentarios
                                    ParentObjectType: "191", // Si tienes un tipo de objeto padre, puedes agregarlo aquí
                                    IdCall: @CallId, // Si tienes un ID de llamada, puedes agregarlo aquí
                                    IdSOT:idSOT,
                                    ParentObjectId: @CallId,
                                    CardCode:cardCode ,
                                    RealTime:tiempoReal,
                                    Technical: tecnico // Técnico
                                };
                                console.log(activityData);

                                // Mostrar mensaje de confirmación con SweetAlert
                                Swal.fire({
                                    title: '¿Está seguro de guardar esta actividad?',
                                   // text: `Técnico: ${tecnico}\nFecha: ${fechaInicial}\nHora Inicial: ${horaInicial}\nHora Final: ${horaFinal}\nTiempo Planeado: ${tiempoPlaneado}`,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Sí, guardar',
                                    cancelButtonText: 'Cancelar'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        Swal.fire({
                                            title: 'Guardando...',
                                            text: 'Por favor, espera.',
                                            allowOutsideClick: false,
                                            didOpen: () => {
                                                Swal.showLoading(); // Muestra el loading
                                            }
                                        });

                                        fetch("/Mtto/Activities", {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify(activityData)
                                        })
                                        .then(response => {
                                            return response.json().then(data => {
                                                if (!response.ok) {
                                                    throw data; // Lanza el error para ser capturado en catch
                                                }
                                                return data;
                                            });
                                        })
                                        .then(data => {
                                            Swal.close(); // Cierra el loading
                                            if (!data.isError) {
                                                Swal.fire('Guardado!', data.message, 'success').then(() => {
                                                    $('#modalAgregarActividad').modal('hide'); // Cierra el modal
                                                    location.reload(); // Recarga la página
                                                });
                                            } else {
                                                Swal.fire('Error!', data.message, 'error');
                                            }
                                        })
                                        .catch(error => {
                                            Swal.close(); // Cierra el loading en caso de error
                                            Swal.fire('Error!', error.message || 'Error al enviar la solicitud.', 'error');
                                        });
                                    }



                                });
                            });

                                        // Función para asegurarse de que el formato es correcto en 24h
                            function convertirHora24(hora) {
                                if (!hora) return "00:00"; // Si el valor está vacío, devolver "00:00"
                                return hora; // El input "time" ya devuelve formato 24h, lo mantenemos sin cambios
                            }

                            function calcularTiempo() {
                                let horaInicial = document.getElementById("horaInicial").value;
                                let horaFinal = document.getElementById("horaFinal").value;
                                let tiempoPlaneado = document.getElementById("tiempoPlaneado");

                                if (horaInicial && horaFinal) {
                                    let inicio = new Date(`1970-01-01T${horaInicial}:00`);
                                    let fin = new Date(`1970-01-01T${horaFinal}:00`);

                                    let diferencia = (fin - inicio) / (1000 * 60); // Convertir milisegundos a minutos

                                    if (diferencia < 0) {
                                        diferencia += 1440; // Si la diferencia es negativa, sumamos 24 horas en minutos
                                    }

                                    tiempoPlaneado.value = diferencia;
                                } else {
                                    tiempoPlaneado.value = "";
                                }
                            }

                            document.getElementById("horaInicial").addEventListener("change", calcularTiempo);
                            document.getElementById("horaFinal").addEventListener("change", calcularTiempo);

                            document.addEventListener("DOMContentLoaded", function () {
                                const CallId =  @CallId; // Reemplázalo con la lógica real para obtener el CallId
                                fetchActivities(CallId);
                            });

                            async function fetchActivities(CallId) {
                                try {
                                    const response = await fetch(`/Mtto/Activities?CallId=${CallId}`);

                                    if (!response.ok) {
                                        throw new Error("Error al obtener las actividades");
                                    }

                                    const data = await response.json();
                                    const tbody = document.querySelector("table tbody");

                                    // Limpiar el contenido de la tabla antes de agregar nuevas filas
                                    tbody.innerHTML = "";

                                    if (data.length === 0) {
                                        tbody.innerHTML = `
                                            <tr>
                                                <td colspan="10" class="text-center">No hay actividades registradas.</td>
                                            </tr>`;
                                        return;
                                    }

                                    // Llenar la tabla con los datos obtenidos
                                    data.forEach(activity => {
                                        const row = document.createElement("tr");
                                        row.innerHTML = `
                                            <td>${activity.NameTechnical}</td>
                                            <td>${activity.ClgId}</td>
                                            <td>${activity.DateStart}</td>
                                            <td>${activity.TimeStart}</td>
                                            <td>${activity.TimeEnd}</td>
                                            <td>${activity.Duration}</td>
                                            <td>${activity.RealTime}</td>
                                            <td>${activity.Remarks || "Sin comentarios"}</td>

                                        `;
                                        tbody.appendChild(row);
                                    });
                                } catch (error) {
                                    console.error("Error:", error);
                                }
                            }



                        </script>
                    }


                </div>

                <div id="traslado" class="tab-content" style="display: none;">
                    <h2>Solicitud de Traslado</h2>
                    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#agregarTrasladoModal">
                        Agregar Solicitud de Compra
                    </button>

                    <!-- Tabla de Traslados -->
                    <div class="traslado-table">
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Traslado</th>
                                        <th>Fecha Documento</th>
                                        <th>Cliente</th>
                                        <th>Almacén de Origen</th>
                                        <th>Almacén de Destino</th>
                                        <th>Accion</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Aquí se llenarán los datos dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Modal de Actividades -->
                    <div class="modal fade" id="agregarTrasladoModal" tabindex="-1" aria-labelledby="agregarTrasladoModalLabel" aria-hidden="true">
                        <div class="modal-dialog" style="max-width: 80%;">
                            <!-- Ajusta el ancho como prefieras -->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="agregarTrasladoModalLabel">Agregar Solicitud de Traslado</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    @await Html.PartialAsync("~/Views/Shared/_SolTransfer.cshtml", ViewData["xModule"] = xModule)

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                        <!-- Tu botón de crear compra -->
                                        <button class="btn btn-success" id="crearTrasladoBtn">Crear </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script>

                        function cargarTraslados(CallId) {
                            fetch(`/Mtto/SolTrasnfer?CallId=${CallId}`)
                                .then(response => response.json())
                                .then(result => {
                                    console.log("Respuesta API tras:", result); // Para depuración

                                    if (Array.isArray(result) && result.length > 0) { // Validar si hay datos
                                        let tbody = document.querySelector(".traslado-table tbody");
                                        tbody.innerHTML = ""; // Limpiar tabla antes de llenarla

                                        result.forEach(orden => {
                                            // Formatear fechas correctamente
                                            let docDate = new Date(orden.DocDate).toLocaleDateString('es-MX');
                                            let reqDate = new Date(orden.ReqDate).toLocaleDateString('es-MX');

                                            let fila = `
                                                <tr>
                                                    <td>${orden.DocNum}</td>
                                                    <td>${docDate}</td>
                                                    <td>${orden.CardCode} - ${orden.CardName}</td>
                                                    <td>${orden.Filler}</td>
                                                    <td>${orden.ToWhsCode}</td>
                                                    <td>
                                                       <button class="btn btn-success" onclick="imprimirTraslados(${orden.DocEntry})">
                                                           <i class="fas fa-print"></i>
                                                       </button>

                                                    </td>
                                                </tr>
                                            `;
                                            tbody.innerHTML += fila;
                                        });
                                    } else {
                                        console.warn("No se encontraron órdenes.");
                                    }
                                })
                                .catch(error => console.error("Error al obtener órdenes:", error));
                        }

                        // Llamar a la función al cargar la página con CallId = 1 por defecto
                        document.addEventListener("DOMContentLoaded", () => {
                            const CallId = @CallId;
                            cargarTraslados(CallId);
                        });

                        function imprimirTraslados(docEntry) {
                            window.open(`/ruta-a-tu-reporte?DocEntry=${docEntry}`, '_blank');
                        }


                    </script>

                    <script>
                        document.addEventListener("DOMContentLoaded", function () {
                            function crearTraslado() {
                                let comentarios = document.getElementById('comentariosTraslado').value.trim();
                                let fechaRequerida = document.getElementById('fechaRequeridaTr').value.trim();
                                let tablaDatos = obtenerDatosTablaTraslados();

                                if (!comentarios || !fechaRequerida || tablaDatos.length === 0) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Campos incompletos',
                                        text: 'Por favor, completa todos los campos antes de enviar.',
                                    });
                                    return;
                                }

                                console.log("Datos enviados:", comentarios, fechaRequerida, tablaDatos);

                                Swal.fire({
                                    title: '¿Confirmar solicitud de traslado?',
                                    text: "No podrás revertir esta acción.",
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Sí, enviar'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        mostrarLoading();
                                        enviarTraslado(comentarios, fechaRequerida, tablaDatos);
                                    }
                                });
                            }

                            function obtenerDatosTablaTraslados() {
                                let filas = document.querySelectorAll("#tablaTraslados tbody tr");
                                let datos = [];

                                filas.forEach(fila => {
                                    let clasificacion = fila.querySelector("#dropdown-clasificacionTr")?.value.trim();
                                   let articulo = fila.querySelector("#articulosInput").value.split(" - ")[0].trim(); // Extraer solo el código
                                    let cantidad = fila.querySelector("td:nth-child(3) input")?.value.trim();
                                    let almacenOrigen = fila.querySelector("#dropdown-WhsOrgn")?.value.trim();
                                    let almacenDestino = fila.querySelector("#dropdown-WhsDstno")?.value.trim();
                                     var CallId = @CallId;

                                    if (clasificacion && articulo && cantidad && almacenOrigen && almacenDestino) {
                                        if (isNaN(cantidad) || cantidad <= 0) {
                                            Swal.fire({
                                                icon: 'warning',
                                                title: 'Cantidad no válida',
                                                text: 'Asegúrate de que la cantidad sea un número positivo.',
                                            });
                                            return;
                                        }

                                        datos.push({
                                            Clasificacion: clasificacion,
                                            ItemCode: articulo,
                                            Quantity: parseInt(cantidad, 10),
                                            FromWhsCode: almacenOrigen,
                                            ToWhsCode: almacenDestino,
                                            IdCall: CallId  // Se obtiene desde la variable global definida en la vista
                                            
                                        });
                                    }
                                });

                                return datos;
                            }

                        function enviarTraslado(comentarios, fechaRequerida, tablaDatos) {
                            let data = {
                                Comments: comentarios,
                                RequiredDate: fechaRequerida,
                                SolStockTransferLines: tablaDatos
                            };

                            Swal.fire({
                                title: 'Enviando...',
                                text: 'Por favor, espera mientras se procesa el traslado.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                                                   fetch('/Mtto/SolTrasnfer', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        })
                        .then(response => {
                            console.log("Respuesta de la API:", response);
                            return response.json().then(body => ({ status: response.status, body }));
                        })
                        .then(result => {
                            console.log("Resultado completo de la API:", result);

                            Swal.close();

                            if (result.status === 200 && result.body.isError === false) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Traslado exitoso',
                                    text: result.body.message || 'Traslado creado con éxito.',
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                let mensajeError = result.body?.message || `Error inesperado. Código: ${result.status}`;
                                console.error("Error detallado:", result);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error en el traslado',
                                    text: mensajeError,
                                });
                            }
                        })
                        .catch(error => {
                            console.error("Error en la solicitud:", error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error de conexión',
                                text: 'No se pudo conectar con el servidor. Verifica tu conexión a internet.',
                            });
                        });

                        }


                            function mostrarLoading() {
                                Swal.fire({
                                    title: 'Procesando...',
                                    text: 'Por favor, espera mientras se envía la solicitud.',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    didOpen: () => {
                                        Swal.showLoading();
                                    }
                                });
                            }

                            function mostrarError(errorResponse) {
                                let mensajeError = errorResponse.message || 'Ocurrió un error desconocido.';
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error al crear el traslado',
                                    text: mensajeError,
                                });
                            }

                            document.getElementById('crearTrasladoBtn').addEventListener('click', crearTraslado);
                        });
                    </script>


                </div>

                <!-- Fin del código de Agregar Traslado -->
                <div id="compra" class="tab-content" style="display: none;">
                    <h2>Solicitud de Compra</h2>
                    <!-- Botón para agregar solicitud de compra -->
                    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#agregarCompraModal">
                        Agregar Solicitud de Compra
                    </button>

                    <!-- Tabla de Solicitudes de Compra -->
                    <div class="compras-table">
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Solicitud</th>
                                        <th>Fecha Documento</th>
                                        <th>Fecha Requerida</th>
                                        <th>Proveedor</th>

                                        <th>Generar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Aquí se llenarán los datos dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Modal de Actividades -->
                    <div class="modal fade" id="agregarCompraModal" tabindex="-1" aria-labelledby="agregarCompraModalLabel" aria-hidden="true">
                        <div class="modal-dialog" style="max-width: 80%;">
                            <!-- Ajusta el ancho como prefieras -->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="agregarCompraModalLabel">Agregar Solicitud de Compra</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    @await Html.PartialAsync("~/Views/Shared/_SolPurchase.cshtml", ViewData["xModule"] = xModule)

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                        <!-- Tu botón de crear compra -->
                                        <button class="btn btn-success" id="crearCompraBtn">🛒 Crear Compra</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script>

                            document.addEventListener("DOMContentLoaded", function () {
                                function crearCompra() {
                                    let camposCompletos = true;

                                        let proveedor =  limpiarCodigo(document.getElementById('proveedorInputPur').value);
                                    let comentarios = document.getElementById('comentariosCompras').value;
                                    let fechaRequerida = document.getElementById('fechaRequeridaPur').value;
                                    let moneda = document.getElementById('dropdown-monedaPur').value;
                                    let tablaDatos = obtenerDatosTablaCompras();

                                    if (!proveedor || !comentarios || !fechaRequerida || !moneda || tablaDatos.length === 0) {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Campos incompletos',
                                            text: 'Por favor, completa todos los campos.',
                                        });
                                        return;
                                    }
                                        console.log(proveedor, comentarios, fechaRequerida, moneda, tablaDatos);

                                    Swal.fire({
                                        title: '¿Confirmar solicitud de compra?',
                                        text: "No podrás revertir esta acción.",
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Sí, enviar'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            mostrarLoading();

                                            enviarCompra(proveedor, comentarios, fechaRequerida, moneda, tablaDatos);

                                        }
                                    });
                                }

                                       function enviarCompra(proveedor, comentarios, fechaRequerida, moneda, tablaDatos) {
                                let data = {
                                    CardCode: proveedor,
                                    Comments: comentarios,
                                    RequriedDate: fechaRequerida,
                                    Currency: moneda,
                                    DocumentLines: tablaDatos
                                };

                                Swal.fire({
                                    title: 'Enviando...',
                                    text: 'Por favor, espera mientras se procesa la compra.',
                                    allowOutsideClick: false,
                                    didOpen: () => {
                                        Swal.showLoading();
                                    }
                                });

                           fetch('/Mtto/PurchaseOrder', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(data)
                            })
                            .then(response => response.json().then(data => ({ status: response.status, body: data })))
                            .then(result => {
                                Swal.close(); // Cierra el loading al recibir respuesta

                                    console.log("Resultado de la API:", result); // 🔍 Debugging

                                    // ✅ Validar correctamente la respuesta exitosa
                                               if (result.status === 200 && result.body.isError === false) {
                                        let mensaje = result.body.Message || 'Compra creada con éxito.';
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Compra creada',
                                            text: mensaje,
                                        }).then(() => {
                                                const CallId = @CallId;
                                    cargarOrdenes(CallId);
                                            location.reload();
                                        });
                                    } else {
                                        console.warn("Respuesta incorrecta:", result.body); // 🔍 Debugging
                                        mostrarError(result.body);
                                    }
                            })
                            .catch(error => {
                                console.error("Error en la solicitud:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error de conexión',
                                    text: 'No se pudo conectar con el servidor. Verifica tu conexión a internet.',
                                });
                            });

                            }

                            function mostrarError(errorResponse) {
                                let mensajeError = 'Ocurrió un error desconocido.';

                                if (errorResponse) {
                                    if (errorResponse.message) {
                                        mensajeError = errorResponse.message;
                                    }
                                    if (errorResponse.error) {
                                        mensajeError += `\nDetalle: ${errorResponse.error}`;
                                    }
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error al crear la compra',
                                    text: mensajeError,
                                });
                            }


                            function mostrarError(errorResponse) {
                                let mensajeError = 'Ocurrió un error desconocido.';

                                if (errorResponse) {
                                    if (errorResponse.message) {
                                            mensajeError = errorResponse.error;
                                    }
                                    if (errorResponse.error) {
                                            mensajeError += `\nDetalle: ${errorResponse.error}`;
                                    }
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error al crear la compra',
                                    text: mensajeError,
                                });
                            }



                                function mostrarLoading() {
                                    Swal.fire({
                                        title: 'Procesando...',
                                        text: 'Por favor, espera mientras se envía la solicitud.',
                                        allowOutsideClick: false,
                                        allowEscapeKey: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });
                                }

                                function mostrarError(errorResponse) {
                                    let mensajeError = errorResponse.message || 'Ocurrió un error desconocido.';

                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error al crear la compra',
                                        text: mensajeError,
                                    });
                                }

                                document.getElementById('crearCompraBtn').addEventListener('click', crearCompra);
                            });


                                 // Función para obtener los datos de la tabla
                        function obtenerDatosTablaCompras() {
                            let datosTabla = [];
                            const CallId = @CallId;

                            console.log("Filas encontradas:", document.querySelectorAll("#tablaBodySolCompra tr").length);


                            document.querySelectorAll('#tablaBodySolCompra tr').forEach((row) => {
                            let clasificacion = row.querySelector('[id^="dropdown-clasificacionSolComp"]')?.value;
                            let articulo = limpiarCodigo(row.querySelector('[id^="articulosInputPur"]')?.value);    
                            let inputsNumericos = row.querySelectorAll('input[type="number"]');

                            let cantidad = parseFloat(inputsNumericos[0]?.value) || 0;
                            let precio = parseFloat(inputsNumericos[1]?.value) || 0;
                            let impuesto = parseFloat(inputsNumericos[2]?.value) || 0; // Suponiendo que el  es el tercer input numérico


                                console.log("Datos de la fila:", clasificacion, articulo, cantidad, precio);

                             if (clasificacion && articulo && cantidad > 0 && precio > 0) {
                                datosTabla.push({
                                    ItemCode: articulo,
                                    Quantity: cantidad,
                                    Price: precio,
                                    Tax: impuesto, // Agregando el impuesto si es necesario
                                    U_BISIT_CallId: CallId
                                });
                            }
                            });

                            return datosTabla;
                        }


                         function limpiarCodigo(cadena) {
                                return cadena ? cadena.split(" - ")[0].trim() : "";
                            }

                                      function formatearFecha(fecha) {
                                let date = new Date(fecha);
                                if (isNaN(date)) return "";
                                return date.toISOString().split("T")[0];
                            }

                    </script>

                    <script>

                        function cargarOrdenes(CallId) {
                            fetch(`/Mtto/PurchaseOrder?CallId=${CallId}`)
                                .then(response => response.json())
                                .then(result => {
                                    console.log("Respuesta API:", result); // Para depuración

                                    if (Array.isArray(result) && result.length > 0) { // Validar si hay datos
                                        let tbody = document.querySelector(".compras-table tbody");
                                        tbody.innerHTML = ""; // Limpiar tabla antes de llenarla

                                        result.forEach(orden => {
                                            // Formatear fechas correctamente
                                            let docDate = new Date(orden.DocDate).toLocaleDateString('es-MX');
                                            let reqDate = new Date(orden.ReqDate).toLocaleDateString('es-MX');

                                            let fila = `
                                                <tr>
                                                    <td>${orden.DocNum}</td>
                                                    <td>${docDate}</td>
                                                    <td>${reqDate}</td>
                                                    <td>${orden.CardCode} - ${orden.CardName}</td>
                                                    <td>
                                                       <button class="btn btn-success" onclick="imprimirOrden(${orden.DocEntry})">
                                                           <i class="fas fa-print"></i>
                                                       </button>

                                                    </td>
                                                </tr>
                                            `;
                                            tbody.innerHTML += fila;
                                        });
                                    } else {
                                        console.warn("No se encontraron órdenes.");
                                    }
                                })
                                .catch(error => console.error("Error al obtener órdenes:", error));
                        }

                        // Llamar a la función al cargar la página con CallId = 1 por defecto
                        document.addEventListener("DOMContentLoaded", () => {
                            const CallId = @CallId;
                            cargarOrdenes(CallId);
                        });

                        function generarOrden(solicitudId) {
                            alert(`Generando orden para solicitud ${solicitudId}`);
                        }

                        function imprimirOrden(docEntry) {
                            window.open(`/ruta-a-tu-reporte?DocEntry=${docEntry}`, '_blank');
                        }


                    </script>

                </div>

                <div id="consumo" class="tab-content" style="display: none;">
                    <h2>Consumo de materiales</h2>
                    <!-- Botón para agregar solicitud de compra -->
                    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#agregarConsumoModal">
                        Agregar
                    </button>

                    <!-- Tabla de Solicitudes de Compra -->
                    <div class="consumo-table">
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Solicitud</th>
                                        <th>Fecha Documento</th>
                                        <th>Fecha Requerida</th>
                                        <th>Proveedor</th>

                                        <th>Generar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Aquí se llenarán los datos dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Modal de Actividades -->
                    <div class="modal fade" id="agregarConsumoModal" tabindex="-1" aria-labelledby="agregarConsumoModalLabel" aria-hidden="true">
                        <div class="modal-dialog" style="max-width: 80%;">
                            <!-- Ajusta el ancho como prefieras -->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="agregarConsumoModalLabel">Agregar Salida de Componentes</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    @await Html.PartialAsync("~/Views/Shared/_SolSalidaComp.cshtml", ViewData["xModule"] = xModule)

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                        <!-- Tu botón de crear compra -->
                                        <button class="btn btn-success" id="crearSalidaConsumoBtn">Crear Salida</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div id="externo" class="tab-content" style="display: none;">
                    <!-- Botón para agregar solicitud de compra -->
                    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#agregarComExternaModal">
                        Agregar Compra
                    </button>

                    <!-- Tabla de Solicitudes de Compra Externo -->
                    <div class="comprasExterna-table">
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Solicitud</th>
                                        <th>Fecha Documento</th>
                                        <th>Fecha Requerida</th>
                                        <th>Proveedor</th>

                                        <th>Generar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Aquí se llenarán los datos dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Modal de Externo -->
                    <div class="modal fade" id="agregarComExternaModal" tabindex="-1" aria-labelledby="agregarComExternaModalLabel" aria-hidden="true">
                        <div class="modal-dialog" style="max-width: 80%;">
                            <!-- Ajusta el ancho como prefieras -->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="agregarComExternaModalLabel">Agregar Compra Externa</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    @await Html.PartialAsync("~/Views/Shared/_SolPurchase.cshtml", ViewData["xModule"] = xModule)

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                        <!-- Tu botón de crear compra -->
                                        <button class="btn btn-success" id="crearCompraExternaBtn">🛒 Crear Compra</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script>

                            document.addEventListener("DOMContentLoaded", function () {
                            function crearCompra() {
                                    let camposCompletos = true;

                                        let proveedor =  limpiarCodigo(document.getElementById('proveedorInput').value);
                                    let comentarios = document.getElementById('comentariosCompras').value;
                                    let fechaRequerida = document.getElementById('fechaRequerida').value;
                                    let moneda = document.getElementById('dropdown-moneda').value;
                                    let tablaDatos = obtenerDatosTabla();

                                    if (!proveedor || !comentarios || !fechaRequerida || !moneda || tablaDatos.length === 0) {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Campos incompletos',
                                            text: 'Por favor, completa todos los campos.',
                                        });
                                        return;
                                    }
                                        console.log(proveedor, comentarios, fechaRequerida, moneda, tablaDatos);

                                    Swal.fire({
                                        title: '¿Confirmar solicitud de compra?',
                                        text: "No podrás revertir esta acción.",
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Sí, enviar'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            mostrarLoading();

                                            enviarCompra(proveedor, comentarios, fechaRequerida, moneda, tablaDatos);

                                        }
                                    });
                                }

                            function enviarCompra(proveedor, comentarios, fechaRequerida, moneda, tablaDatos) {
                                let data = {
                                    CardCode: proveedor,
                                    Comments: comentarios,
                                    RequriedDate: fechaRequerida,
                                    Currency: moneda,
                                    DocumentLines: tablaDatos
                                };

                                Swal.fire({
                                    title: 'Enviando...',
                                    text: 'Por favor, espera mientras se procesa la compra.',
                                    allowOutsideClick: false,
                                    didOpen: () => {
                                        Swal.showLoading();
                                    }
                                });

                           fetch('/Mtto/PurchaseOrderExt', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(data)
                            })
                            .then(response => response.json().then(data => ({ status: response.status, body: data })))
                            .then(result => {
                                Swal.close(); // Cierra el loading al recibir respuesta

                                    console.log("Resultado de la API:", result); // 🔍 Debugging

                                    // ✅ Validar correctamente la respuesta exitosa
                                               if (result.status === 200 && result.body.isError === false) {
                                        let mensaje = result.body.Message || 'Compra creada con éxito.';
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Compra creada',
                                            text: mensaje,
                                        }).then(() => {
                                                const CallId = @CallId;
                                    cargarOrdenes(CallId);
                                            location.reload();
                                        });
                                    } else {
                                        console.warn("Respuesta incorrecta:", result.body); // 🔍 Debugging
                                        mostrarError(result.body);
                                    }
                            })
                            .catch(error => {
                                console.error("Error en la solicitud:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error de conexión',
                                    text: 'No se pudo conectar con el servidor. Verifica tu conexión a internet.',
                                });
                            });

                            }

                            function mostrarError(errorResponse) {
                                let mensajeError = 'Ocurrió un error desconocido.';

                                if (errorResponse) {
                                    if (errorResponse.message) {
                                        mensajeError = errorResponse.message;
                                    }
                                    if (errorResponse.error) {
                                        mensajeError += `\nDetalle: ${errorResponse.error}`;
                                    }
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error al crear la compra',
                                    text: mensajeError,
                                });
                            }


                            function mostrarError(errorResponse) {
                                let mensajeError = 'Ocurrió un error desconocido.';

                                if (errorResponse) {
                                    if (errorResponse.message) {
                                            mensajeError = errorResponse.error;
                                    }
                                    if (errorResponse.error) {
                                            mensajeError += `\nDetalle: ${errorResponse.error}`;
                                    }
                                }

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error al crear la compra',
                                    text: mensajeError,
                                });
                            }



                            function mostrarLoading() {
                                    Swal.fire({
                                        title: 'Procesando...',
                                        text: 'Por favor, espera mientras se envía la solicitud.',
                                        allowOutsideClick: false,
                                        allowEscapeKey: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });
                                }

                            function mostrarError(errorResponse) {
                                    let mensajeError = errorResponse.message || 'Ocurrió un error desconocido.';

                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error al crear la compra',
                                        text: mensajeError,
                                    });
                                }

                                document.getElementById('crearCompraExternaBtn').addEventListener('click', crearCompra);
                            });

                                 // Función para obtener los datos de la tabla
                           function obtenerDatosTabla() {
                            let datosTabla = [];
                            const CallId = @CallId;

                            document.querySelectorAll('#tablaBody tr').forEach((row) => {
                                let clasificacion = row.querySelector('#dropdown-clasificacion')?.value;
                                    let articulo =  limpiarCodigo(row.querySelector('#articulosInput')?.value);
                                        let cantidad = parseFloat(row.querySelectorAll('input[type="number"]')[0]?.value) || 0;
                                        let precio = parseFloat(row.querySelectorAll('input[type="number"]')[1]?.value) || 0;
                                let impuesto = row.querySelector('#dropdown-impuesto')?.value;

                                console.log("Datos de la fila:", clasificacion, articulo, cantidad, precio, impuesto);

                                if (clasificacion && articulo && cantidad && precio && impuesto) {
                                    datosTabla.push({

                                        ItemCode: articulo,
                                        Quantity: cantidad,
                                        Price: precio,
                                        TaxCode: impuesto,
                                        U_BISIT_CallId: CallId
                                    });
                                }
                            });

                            return datosTabla;
                        }

                            function limpiarCodigo(cadena) {
                                return cadena ? cadena.split(" - ")[0].trim() : "";
                            }

                            function formatearFecha(fecha) {
                                let date = new Date(fecha);
                                if (isNaN(date)) return "";
                                return date.toISOString().split("T")[0];
                            }

                    </script>

                    <script>

                        function cargarOrdenes(CallId) {
                            fetch(`/Mtto/PurchaseOrderExt?CallId=${CallId}`)
                                .then(response => response.json())
                                .then(result => {
                                    console.log("Respuesta API:", result); // Para depuración

                                    if (Array.isArray(result) && result.length > 0) { // Validar si hay datos
                                        let tbody = document.querySelector(".compras-table tbody");
                                        tbody.innerHTML = ""; // Limpiar tabla antes de llenarla

                                        result.forEach(orden => {
                                            // Formatear fechas correctamente
                                            let docDate = new Date(orden.DocDate).toLocaleDateString('es-MX');
                                            let reqDate = new Date(orden.ReqDate).toLocaleDateString('es-MX');

                                            let fila = `
                                                <tr>
                                                    <td>${orden.DocNum}</td>
                                                    <td>${docDate}</td>
                                                    <td>${reqDate}</td>
                                                    <td>${orden.CardCode} - ${orden.CardName}</td>
                                                    <td>
                                                       <button class="btn btn-success" onclick="imprimirOrden(${orden.DocEntry})">
                                                           <i class="fas fa-print"></i>
                                                       </button>

                                                    </td>
                                                </tr>
                                            `;
                                            tbody.innerHTML += fila;
                                        });
                                    } else {
                                        console.warn("No se encontraron órdenes.");
                                    }
                                })
                                .catch(error => console.error("Error al obtener órdenes:", error));
                        }

                        // Llamar a la función al cargar la página con CallId = 1 por defecto
                        document.addEventListener("DOMContentLoaded", () => {
                            const CallId = @CallId;
                            cargarOrdenes(CallId);
                        });

                        function generarOrden(solicitudId) {
                            alert(`Generando orden para solicitud ${solicitudId}`);
                        }

                        function imprimirOrden(docEntry) {
                            window.open(`/ruta-a-tu-reporte?DocEntry=${docEntry}`, '_blank');
                        }


                    </script>


                </div>

                <div id="evidencias" class="tab-content" style="display: none;">

                    <h2>Subir Evidencias</h2>

                    <div class="adjuntar-btn-container">
                        <button class="btn btn-success" onclick="adjuntarEvidencias()">Adjuntar</button>
                    </div>

                    <div class="upload-container">
                        <!-- Archivos Generales -->
                        <div class="upload-box" id="dropZoneFiles">
                            <h3>Subir Archivos</h3>
                            <button class="btn btn-primary mb-3" id="elegirArchivosBtn">Elegir Archivos</button>
                            <input type="file" multiple id="fileInput" style="display: none;" />
                            <div class="file-list" id="fileList"></div>
                        </div>

                        <!-- Imágenes de Antes -->
                        <div class="upload-box" id="dropZoneBefore">
                            <h3>Imágenes de Antes</h3>
                            <button class="btn btn-primary mb-3" id="elegirAntesBtn">Elegir Imágenes</button>
                            <input type="file" accept="image/*" multiple id="beforeImageInput" style="display: none;" />
                            <div class="file-list" id="beforeList"></div>
                        </div>

                        <!-- Imágenes de Después -->
                        <div class="upload-box" id="dropZoneAfter">
                            <h3>Imágenes de Después</h3>
                            <button class="btn btn-primary mb-3" id="elegirDespuesBtn">Elegir Imágenes</button>
                            <input type="file" accept="image/*" multiple id="afterImageInput" style="display: none;" />
                            <div class="file-list" id="afterList"></div>
                        </div>
                    </div>


                    <script>
                        function setupFileUpload(buttonId, inputId, dropZoneId, fileListId) {
                            let button = document.getElementById(buttonId);
                            let input = document.getElementById(inputId);
                            let dropZone = document.getElementById(dropZoneId);
                            let fileList = document.getElementById(fileListId);

                            button.addEventListener("click", () => input.click());

                            input.addEventListener("change", () => displayFileNames(input.files, fileList));

                            dropZone.addEventListener("dragover", (event) => {
                                event.preventDefault();
                                dropZone.classList.add("dragover");
                            });

                            dropZone.addEventListener("dragleave", () => dropZone.classList.remove("dragover"));

                            dropZone.addEventListener("drop", (event) => {
                                event.preventDefault();
                                dropZone.classList.remove("dragover");
                                input.files = event.dataTransfer.files;
                                displayFileNames(input.files, fileList);
                            });
                        }

                        function displayFileNames(files, fileList) {
                            fileList.innerHTML = "";
                            for (let i = 0; i < files.length; i++) {
                                let fileItem = document.createElement("div");
                                fileItem.textContent = files[i].name;
                                fileList.appendChild(fileItem);
                            }
                        }

                        setupFileUpload("elegirArchivosBtn", "fileInput", "dropZoneFiles", "fileList");
                        setupFileUpload("elegirAntesBtn", "beforeImageInput", "dropZoneBefore", "beforeList");
                        setupFileUpload("elegirDespuesBtn", "afterImageInput", "dropZoneAfter", "afterList");

                        function adjuntarEvidencias() {
                            // Verificar que hay archivos seleccionados antes de proceder
                            let files = document.getElementById("fileInput").files;
                            let beforeImages = document.getElementById("beforeImageInput").files;
                            let afterImages = document.getElementById("afterImageInput").files;
                             const CallId = @CallId;

                            if (files.length === 0 && beforeImages.length === 0 && afterImages.length === 0) {
                                Swal.fire({
                                    icon: "warning",
                                    title: "No se seleccionaron archivos",
                                    text: "Por favor, selecciona al menos un archivo antes de adjuntar.",
                                });
                                return;
                            }

                            // Confirmación antes de enviar los archivos
                            Swal.fire({
                                title: "¿Estás seguro?",
                                text: "¿Deseas adjuntar los archivos seleccionados?",
                                icon: "question",
                                showCancelButton: true,
                                confirmButtonText: "Sí, adjuntar",
                                cancelButtonText: "Cancelar",
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    let formData = new FormData();
                                                // Agregar CallId al FormData
                                    formData.append("CallId", CallId);

                                    // Archivos Generales
                                    for (let i = 0; i < files.length; i++) {
                                        formData.append("archivos", files[i]);
                                    }

                                    // Imágenes Antes
                                    for (let i = 0; i < beforeImages.length; i++) {
                                        formData.append("imagenesAntes", beforeImages[i]);
                                    }

                                    // Imágenes Después
                                    for (let i = 0; i < afterImages.length; i++) {
                                        formData.append("imagenesDespues", afterImages[i]);
                                    }

                                    fetch("/Mtto/AdjuntarEvidencias", {
                                        method: "POST",
                                        body: formData,
                                    })
                                        .then((response) => response.json())
                                        .then((data) => {
                                            if (data.success) {
                                                Swal.fire({
                                                    icon: "success",
                                                    title: "¡Evidencias adjuntadas!",
                                                    text: "Los archivos fueron subidos correctamente.",
                                                });
                                            } else {
                                                Swal.fire({
                                                    icon: "error",
                                                    title: "Error al adjuntar",
                                                    text: "Hubo un problema al subir los archivos.",
                                                });
                                            }
                                        })
                                        .catch((error) => {
                                            Swal.fire({
                                                icon: "error",
                                                title: "Error en el servidor",
                                                text: "No se pudo conectar con el servidor.",
                                            });
                                            console.error("Error al enviar archivos:", error);
                                        });
                                }
                            });
                        }

                    </script>



                </div>

            </div>
        </div>
    </div>
    <!-- Pie de página (se mantiene igual) -->
    <div class="fixed-section">
        <form>
            <div class="row mb-3">
                <div class="col">
                    <label class="form-label">Técnico</label>
                    <input type="text" class="form-control" value="Alberto Sanchez" readonly>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <label class="form-label">Descripción de la falla</label>
                    <textarea class="form-control" rows="3" placeholder="Ingrese la descripción de la falla"></textarea>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <label class="form-label">Solución de la falla</label>
                    <textarea class="form-control" rows="3" placeholder="Ingrese la solución de la falla"></textarea>
                </div>
            </div>
        </form>
    </div>
</div>


<script>
           document.addEventListener('DOMContentLoaded', cargarTecnicos);

           async function cargarTecnicos() {
              try {
                  const response = await fetch('/MasterData/Technicals');

                  // Intentamos parsear la respuesta como JSON
                  const result = await response.json();

                  // Verificar si result es un arreglo de tecnicos
                  if (!Array.isArray(result)) {
                      console.error("La respuesta no es un arreglo de tecnicos:", result);
                      return;
                  }

                  const tecnicos = result;
                  const datalist = document.getElementById('tecnico');
                  // Limpiar opciones previas
                  datalist.innerHTML = '';

                  // Rellenar el datalist con las opciones
                  tecnicos.forEach(tecnico => {
                      const option = document.createElement('option');
                      option.value = `${tecnico.Code} - ${tecnico.Name}`;
                      option.id = tecnico.Code;  // Asignar el id con el valor de Code
                      datalist.appendChild(option);
                  });


              } catch (error) {
                  console.error("Error al cargar tecnicos:", error);

              }
          }

          document.addEventListener('DOMContentLoaded', function () {
              // Obtener todos los botones de tabs y las secciones de contenido
              const buttons = document.querySelectorAll('.large-button');
              const tabs = document.querySelectorAll('.tab-content');

              function setActiveTab(tabId, button) {
                  const tabElement = document.getElementById(tabId);
                  if (!tabElement) return;

                  // Ocultar todos los tabs
                  tabs.forEach(tab => tab.style.display = 'none');

                  // Mostrar el tab seleccionado
                  tabElement.style.display = 'block';

                  // Remover clase activa de todos los botones
                  buttons.forEach(btn => btn.classList.remove('active-tab'));

                  // Agregar clase activa al botón seleccionado
                  button.classList.add('active-tab');
              }

              // Asignar eventos a los botones de los tabs
              buttons.forEach(button => {
                  button.addEventListener('click', function () {
                      setActiveTab(this.dataset.tab, this);
                  });
              });

              // Activar el primer tab por defecto
              if (buttons.length > 0) {
                  buttons[0].click();
              }
          });

              function setActiveTab(tabId, button) {
              const tabs = document.querySelectorAll('.tab-content');
              const buttons = document.querySelectorAll('.large-button');

              const tabElement = document.getElementById(tabId);
              if (!tabElement) return;

              // Ocultar todos los tabs
              tabs.forEach(tab => tab.style.display = 'none');

              // Mostrar el tab seleccionado
              tabElement.style.display = 'block';

              // Remover clase activa de todos los botones
              buttons.forEach(btn => btn.classList.remove('active-tab'));

              // Agregar clase activa al botón seleccionado
              button.classList.add('active-tab');
          }

          document.addEventListener('DOMContentLoaded', function () {
              const buttons = document.querySelectorAll('.large-button');

              buttons.forEach(button => {
                  button.addEventListener('click', function () {
                      setActiveTab(this.dataset.tab, this);
                  });
              });

              if (buttons.length > 0) {
                  buttons[0].click();
              }
          });




    @*   document.addEventListener('DOMContentLoaded', function () {
        // Modal: Abrir y cerrar
        const modal = document.getElementById('agregarActividadModal');
        const openModalBtn = document.getElementById('agregarActividadBtn');
        const closeModalBtns = document.querySelectorAll('.close-modal');

        openModalBtn?.addEventListener('click', () => modal.style.display = 'block');

        closeModalBtns.forEach(btn => {
            btn.addEventListener('click', () => modal.style.display = 'none');
        });

        // Formulario: Enviar actividad
        const form = document.getElementById('agregarActividadForm');
        form?.addEventListener('submit', function (event) {
            event.preventDefault();
            // Lógica para guardar la actividad
            modal.style.display = 'none';
        });

        // Tabs: Manejo de pestañas
        const buttons = document.querySelectorAll('.tab-buttons button');
        const tabs = document.querySelectorAll('.tab-content');

        function setActiveTab(tabId, button) {
            console.log(tabId, button);
            // Ocultar todos los tabs
            tabs.forEach(tab => tab.style.display = 'none');

            // Mostrar el tab seleccionado
            document.getElementById(tabId).style.display = 'block';

            // Remover clase activa de todos los botones
            buttons.forEach(btn => btn.classList.remove('active-tab'));

            // Agregar clase activa al botón seleccionado
            button.classList.add('active-tab');
        }

        // Asignar eventos a los botones de los tabs
        buttons.forEach(button => {
            button.addEventListener('click', function () {
                setActiveTab(this.getAttribute('data-tab'), this);
            });
        });

        // Activar el primer tab por defecto
        if (buttons.length > 0) {
            buttons[0].click();
        }
    });
 *@
</script>





